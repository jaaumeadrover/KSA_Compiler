
/**
 Per compilar aquest fitxer s'ha d'haver instal·lat JavaCup

  java -jar java-cup-11b.jar sintactic.cup

alternativament

  java -classpath path_fins_java-cup-11b.jar java_cup.Main sintactic.cup

 **/

/**
 * Assignatura 21780 - Compiladors
 * Estudis: Grau en Informàtica 
 * Itinerari: Intel·ligència Artificial i Computació
 *
 * Professor: Pere Palmer
 */
package compiler.sintactic;



import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

import java_cup.runtime.*;

import compiler.sintactic.Symbols.*;

import java.io.PrintStream;
import java.util.HashMap;

class Parser;

//TERMINALS

//identificadores
terminal id;
//enteros
terminal integer;
//operadors
terminal bg, sm, bg_eq, sm_eq, eq, neg;
//operaciones
terminal add, sub, mul, div, mod;
//caracteres suplementarios
terminal asig, smcol, com, brop, brcl, lop, lclose, lparen, rparen;
//palabras reservadas
terminal r_if, r_else, r_switch, r_case, r_default, r_break, r_function, r_procedure, r_return, r_while, r_for, r_const,
         r_and, r_or, r_not, r_int, r_bool,r_main;

non terminal  SymbolProgram   program;
non terminal  SymbolDeclList  declList;
non terminal  SymbolDecl   decl;
non terminal  SymbolVarDecl  varDecl;
non terminal  SymbolVarInit  varInit;
non terminal  SymbolFuncDecl   funcDecl;
non terminal  SymbolFuncCap   funcCap;
non terminal  SymbolFuncContCap   funcContCap;
non terminal  SymbolBloc   bloc;
non terminal  SymbolProcDecl   procDecl;
non terminal  SymbolProcCap   procCap;
non terminal  SymbolProcContCap   procContCap;
non terminal  SymbolArgType   argType;
non terminal  SymbolType   type;
non terminal  SymbolStatementList   statementList;
non terminal  SymbolStatement   statement;
non terminal  SymbolWhileStatement   whileIteration;
non terminal  SymbolForStatement   forIteration;
non terminal  SymbolForInit   forInit;
non terminal  SymbolForPostExpression   forPostExpression;
non terminal  SymbolSwitchStatement   switchStatement;
non terminal  SymbolContSwitch   contSwitch;
non terminal  SymbolSwitchCaseCont   switchCaseCont;
non terminal  SymbolIfStatement   ifStatement;
non terminal  SymbolElseIfStatement   elseIfStatement;
non terminal  SymbolElseStatement   elseStatement;
non terminal  SymbolExpressio   exprSimple;
non terminal  SymbolReferencia   referencia;
non terminal  SymbolArithmeticalExpression   aritExpr;
non terminal  SymbolAssignacio   expression;
non terminal  SymbolSubProgramCall   subProgramCall;
non terminal  SymbolSubProgramContCall   subProgramContCall;
non terminal  SymbolLiteral   literal;
non terminal  SymbolArray      array;
non terminal  SymbolArrayInit  arrayInit;
non terminal  SymbolArrayInitList  arrayInitList;
non terminal  SymbolArrayFinalList  arrayFinallist;
non terminal  SymbolArrayEllist     arrayElList;
non terminal SymbolConstSwitch constSwitch;
non terminal SymbolRealExpr realExpr;
non terminal SymbolBolExpr boolExpr;
non terminal SymbolOperador op;
non terminal SymbolBool bool;

non terminal SymbolBoolOp boolOp;
non terminal SymbolAritOp aritOp;
non terminal SymbolRealOp realOp;

non terminal SymbolStrLiteral strLiteral;
non terminal SymbolIntLiteral intLiteral;
non terminal SymbolCharLiteral charLiteral;

precedence right asig;
precedence left  add, sub;
precedence left  mul, div, mod;


start with program;

program ::= declList r_main brop declList brcl {: :} //producció inicial
    ;

declList ::= declList decl {: :} //Llista declaracions
    | decl {: :}
    ;

decl ::= varDecl smcol      //declaració de variables,funcions o procediments
    | funcDecl
    | procDecl
    ;

varDecl ::= r_const type id varInit    //declaració de una constant
    |type id varInit                 //declaració d'una variable
    |varDecl com id varInit;

varInit ::= asig exprSimple     //asigació d'un valor a una variable
    |asig arrayInit
    ;

arrayInit ::= lparen arrayElList rparen
    |lop integer lclose;//inicialització d'un array: 'nom' [arrayEllist]

arrayElList ::= arrayFinallist //possar els elements de l'array o asigar-li una estructura
    | arrayInitList
    ;

arrayInitList ::= arrayInitList com lop arrayElList lclose //estructura de l'array
    | lop arrayElList lclose
    ;

 arrayFinallist ::= exprSimple //asignam els elements de l'array com a una o més expresions simples
    | arrayFinallist com exprSimple
    ;

funcDecl ::= r_function type id funcCap brop bloc brcl ; //declaració d'una funció

funcCap ::= funcContCap rparen                           //declaració de parentesis per als arguments
    | lparen rparen
    ;

funcContCap ::= lparen argType type id        //tancam parentesis i definim els paràmetres
    | funcContCap com argType type id
    ;

procDecl ::= r_procedure id procCap brop bloc brcl; //declaració d'un procediment: proc 'nom' parametres {...}

procCap ::=procContCap rparen       //declaració de parentesis per als arguments
    |lparen rparen
    ;

procContCap ::= lparen argType type id //tancam parentesis i definim els paràmetres
    | procContCap com argType type id
    ;

argType ::= r_const //tipus d'argument (constant o no)
    | ;

bloc ::= statementList ;      //bloc d'instruccions per a una funció


statementList ::= statement statementList      //declaració d'una llista
    | statement error statementList
    |;

statement ::= varDecl smcol
    |expression smcol
    |subProgramCall smcol
    |forIteration
    |whileIteration
    |ifStatement
    |switchStatement
    |r_return exprSimple
    |r_break;

forIteration ::= r_for lparen forInit smcol exprSimple smcol forPostExpression rparen brop bloc brcl
;  // for (init; expresio; postExpresio){...}

forInit ::= varDecl //inicialització de l'iterador
    |expression
    | ;

forPostExpression ::= expression  //declaració de la postExpressio
    |
    ;

whileIteration ::= r_while lparen exprSimple rparen brop bloc brcl; //while (expresio){...}

ifStatement ::= elseStatement brcl;

elseStatement ::= elseIfStatement r_else brop bloc
    | elseIfStatement
    ;

elseIfStatement::= elseIfStatement r_else r_if exprSimple brop bloc brcl
    ;

switchStatement ::= r_switch lparen constSwitch brcl; //switch (...)

switchCaseCont ::= contSwitch r_case exprSimple;

contSwitch ::= exprSimple rparen brop //contingut del switch
    | contSwitch r_default brop bloc
    | switchCaseCont brop bloc;

exprSimple ::= lparen exprSimple rparen
    |referencia
    //|literal op
    |boolExpr
    |aritExpr
    |realExpr
    ;

//OPERADORS
op::= boolOp|aritOp|realOp;
boolOp::= r_and|r_or ;
aritOp ::= add|sub|mul|div|mod;
realOp::= neg|eq|bg|sm|bg_eq|sm_eq;

//EXPRESSIONS
boolExpr::= r_not exprSimple
    |exprSimple boolOp exprSimple | bool;

aritExpr ::= exprSimple aritOp exprSimple;

realExpr ::= exprSimple realOp exprSimple;


referencia ::= id
    | array
    | subProgramCall
     ;

subProgramCall ::= id lparen rparen
    | subProgramContCall rparen
    ;

subProgramContCall ::= id lparen exprSimple
    | subProgramContCall com exprSimple
    ;

literal ::= strLiteral
    | intLiteral
    | charLiteral
    ;

type ::= id
    | array| r_int| r_bool
    ;

/*array ::= contArray;

contArray ::= lop exprSimple lclose
    |contArray lop exprSimple lclose
    |id lop lclose
    |contArray lop lclose
    ;
*/
expression ::= referencia asig exprSimple
    | referencia asig arrayInit
    | referencia add asig exprSimple
    | referencia div asig exprSimple
    | referencia mul asig exprSimple
    | referencia sub asig exprSimple
    | referencia mod asig exprSimple
    ;