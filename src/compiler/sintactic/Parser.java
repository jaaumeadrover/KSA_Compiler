
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import compiler.Symbols.TaulaSimbols.*;
import compiler.ArbreSintactic.*;
import compiler.GeneracioCodiIntermedi.*;
import compiler.Semantic.Semantic;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

//  /** Constructor which sets the default scanner. */
//  @Deprecated
//  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\003\011\000\002\004" +
    "\004\000\002\004\002\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\006\006\000\002\006\005\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\031\006\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\033\005\000\002\010\013\000\002\011\004" +
    "\000\002\011\004\000\002\012\011\000\002\032\005\000" +
    "\002\032\006\000\002\015\004\000\002\015\002\000\002" +
    "\016\004\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\004\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\046\005\000" +
    "\002\047\006\000\002\050\003\000\002\050\005\000\002" +
    "\051\003\000\002\051\003\000\002\025\006\000\002\025" +
    "\004\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\006\000\002\036\003\000" +
    "\002\030\006\000\002\035\004\000\002\035\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\026" +
    "\005\000\002\026\004\000\002\027\005\000\002\027\005" +
    "\000\002\042\012\000\002\043\004\000\002\043\002\000" +
    "\002\044\006\000\002\045\005\000\002\045\002\000\002" +
    "\020\015\000\002\021\003\000\002\021\002\000\002\022" +
    "\003\000\002\022\002\000\002\017\011\000\002\023\011" +
    "\000\002\023\015\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\020\043\ufffe\044\ufffe\050\ufffe\054\ufffe\055" +
    "\ufffe\056\ufffe\057\ufffe\001\002\000\020\043\015\044\013" +
    "\050\012\054\021\055\022\056\010\057\016\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\004" +
    "\024\266\001\002\000\004\033\261\001\002\000\020\043" +
    "\ufffb\044\ufffb\050\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\001\002\000\010\054\021\055\022\057\016\001\002\000" +
    "\004\004\250\001\002\000\020\043\ufffc\044\ufffc\050\ufffc" +
    "\054\ufffc\055\ufffc\056\ufffc\057\ufffc\001\002\000\010\054" +
    "\uffac\055\uffac\057\uffac\001\002\000\006\004\ufff2\031\ufff2" +
    "\001\002\000\004\004\023\001\002\000\020\043\uffff\044" +
    "\uffff\050\uffff\054\uffff\055\uffff\056\uffff\057\uffff\001\002" +
    "\000\006\004\ufff4\031\ufff4\001\002\000\006\004\ufff3\031" +
    "\ufff3\001\002\000\006\023\024\024\ufff6\001\002\000\022" +
    "\004\026\005\027\007\033\033\041\053\035\054\021\055" +
    "\022\057\016\001\002\000\004\024\ufff9\001\002\000\054" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\031\102\032\uffd7\033\103\034\uffd7\051" +
    "\uffd7\052\uffd7\001\002\000\050\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\032\uffd4" +
    "\034\uffd4\051\uffd4\052\uffd4\001\002\000\014\024\ufff8\025" +
    "\ufff8\026\ufff8\032\ufff8\034\ufff8\001\002\000\050\010\047" +
    "\011\061\012\051\013\060\014\065\015\045\016\057\017" +
    "\052\020\062\021\056\022\064\023\024\024\ufff6\025\ufff6" +
    "\026\ufff6\032\ufff6\034\ufff6\051\054\052\063\001\002\000" +
    "\050\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\032\uffd2\034\uffd2\051\uffd2\052\uffd2" +
    "\001\002\000\050\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\032\uffd5\034\uffd5\051" +
    "\uffd5\052\uffd5\001\002\000\006\026\076\034\077\001\002" +
    "\000\004\033\073\001\002\000\050\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\032" +
    "\uffd6\034\uffd6\051\uffd6\052\uffd6\001\002\000\004\031\070" +
    "\001\002\000\014\024\ufff7\025\ufff7\026\ufff7\032\ufff7\034" +
    "\ufff7\001\002\000\014\004\026\005\027\007\033\033\041" +
    "\053\035\001\002\000\004\034\043\001\002\000\050\010" +
    "\047\011\061\012\051\013\060\014\065\015\045\016\057" +
    "\017\052\020\062\021\056\022\064\023\024\024\ufff6\025" +
    "\ufff6\026\ufff6\032\ufff6\034\ufff6\051\054\052\063\001\002" +
    "\000\014\004\uffcc\005\uffcc\007\uffcc\033\uffcc\053\uffcc\001" +
    "\002\000\014\004\uffc4\005\uffc4\007\uffc4\033\uffc4\053\uffc4" +
    "\001\002\000\014\024\uffcf\025\uffcf\026\uffcf\032\uffcf\034" +
    "\uffcf\001\002\000\014\004\uffc2\005\uffc2\007\uffc2\033\uffc2" +
    "\053\uffc2\001\002\000\014\004\uffce\005\uffce\007\uffce\033" +
    "\uffce\053\uffce\001\002\000\014\004\uffc0\005\uffc0\007\uffc0" +
    "\033\uffc0\053\uffc0\001\002\000\014\004\uffc8\005\uffc8\007" +
    "\uffc8\033\uffc8\053\uffc8\001\002\000\014\004\026\005\027" +
    "\007\033\033\041\053\035\001\002\000\014\004\uffcb\005" +
    "\uffcb\007\uffcb\033\uffcb\053\uffcb\001\002\000\014\004\uffcd" +
    "\005\uffcd\007\uffcd\033\uffcd\053\uffcd\001\002\000\014\004" +
    "\uffc6\005\uffc6\007\uffc6\033\uffc6\053\uffc6\001\002\000\014" +
    "\004\uffc9\005\uffc9\007\uffc9\033\uffc9\053\uffc9\001\002\000" +
    "\014\004\uffbf\005\uffbf\007\uffbf\033\uffbf\053\uffbf\001\002" +
    "\000\014\004\uffc1\005\uffc1\007\uffc1\033\uffc1\053\uffc1\001" +
    "\002\000\014\004\uffc7\005\uffc7\007\uffc7\033\uffc7\053\uffc7" +
    "\001\002\000\014\004\uffca\005\uffca\007\uffca\033\uffca\053" +
    "\uffca\001\002\000\014\004\uffc5\005\uffc5\007\uffc5\033\uffc5" +
    "\053\uffc5\001\002\000\014\004\uffc3\005\uffc3\007\uffc3\033" +
    "\uffc3\053\uffc3\001\002\000\014\024\uffd9\025\uffd9\026\uffd9" +
    "\032\uffd9\034\uffd9\001\002\000\014\024\uffd0\025\uffd0\026" +
    "\uffd0\032\uffd0\034\uffd0\001\002\000\014\004\026\005\027" +
    "\007\033\033\041\053\035\001\002\000\004\032\072\001" +
    "\002\000\014\024\ufff5\025\ufff5\026\ufff5\032\ufff5\034\ufff5" +
    "\001\002\000\014\004\026\005\027\007\033\033\041\053" +
    "\035\001\002\000\004\034\075\001\002\000\050\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\032\uffd3\034\uffd3\051\uffd3\052\uffd3\001\002\000" +
    "\014\004\026\005\027\007\033\033\041\053\035\001\002" +
    "\000\050\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\032\uffbd\034\uffbd\051\uffbd\052" +
    "\uffbd\001\002\000\006\026\uffbb\034\uffbb\001\002\000\014" +
    "\024\uffd8\025\uffd8\026\uffd8\032\uffd8\034\uffd8\001\002\000" +
    "\014\004\026\005\027\007\033\033\041\053\035\001\002" +
    "\000\016\004\026\005\027\007\033\033\041\034\105\053" +
    "\035\001\002\000\006\026\uffbc\034\uffbc\001\002\000\050" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\032\uffbe\034\uffbe\051\uffbe\052\uffbe\001" +
    "\002\000\004\032\107\001\002\000\050\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\032\uffd1\034\uffd1\051\uffd1\052\uffd1\001\002\000\010\054" +
    "\021\055\022\057\016\001\002\000\004\004\112\001\002" +
    "\000\004\033\115\001\002\000\004\027\125\001\002\000" +
    "\006\026\121\034\122\001\002\000\012\034\116\054\021" +
    "\055\022\057\016\001\002\000\004\027\uffee\001\002\000" +
    "\004\004\120\001\002\000\006\026\uffec\034\uffec\001\002" +
    "\000\010\054\021\055\022\057\016\001\002\000\004\027" +
    "\uffef\001\002\000\004\004\124\001\002\000\006\026\uffeb" +
    "\034\uffeb\001\002\000\044\004\026\005\027\007\033\033" +
    "\041\035\127\037\141\042\145\045\uffe9\046\134\047\132" +
    "\050\012\053\035\054\021\055\022\057\016\060\131\061" +
    "\146\001\002\000\052\004\uffe5\005\uffe5\007\uffe5\030\uffe5" +
    "\033\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\001\002\000\004\033\236\001" +
    "\002\000\052\004\026\005\027\007\033\030\uffe9\033\041" +
    "\035\127\037\141\040\uffe9\041\uffe9\042\145\045\uffe9\046" +
    "\134\047\132\050\012\053\035\054\021\055\022\057\016" +
    "\060\131\061\146\001\002\000\004\033\233\001\002\000" +
    "\004\033\217\001\002\000\004\024\216\001\002\000\004" +
    "\033\210\001\002\000\004\024\207\001\002\000\004\024" +
    "\206\001\002\000\052\004\uffe1\005\uffe1\007\uffe1\030\uffe1" +
    "\033\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\001\002\000\004\045\202\001" +
    "\002\000\004\033\161\001\002\000\052\004\uffe6\005\uffe6" +
    "\007\uffe6\030\uffe6\033\uffe6\035\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\057\uffe6\060\uffe6\061\uffe6\001\002\000" +
    "\052\004\uffe2\005\uffe2\007\uffe2\030\uffe2\033\uffe2\035\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\001\002\000\004\024\160\001\002\000\004\024" +
    "\157\001\002\000\004\033\147\001\002\000\014\004\026" +
    "\005\027\006\151\007\033\053\035\001\002\000\006\016" +
    "\uffda\034\uffda\001\002\000\006\016\uffdb\034\uffdb\001\002" +
    "\000\006\016\uffdd\034\uffdd\001\002\000\006\016\155\034" +
    "\154\001\002\000\004\024\uffde\001\002\000\014\004\026" +
    "\005\027\006\151\007\033\053\035\001\002\000\006\016" +
    "\uffdc\034\uffdc\001\002\000\052\004\uffe0\005\uffe0\007\uffe0" +
    "\030\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\057\uffe0\060\uffe0\061\uffe0\001\002\000\052\004" +
    "\uffe7\005\uffe7\007\uffe7\030\uffe7\033\uffe7\035\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\001\002\000\014\004\026\005\027\007\033\033\041\053" +
    "\035\001\002\000\004\034\163\001\002\000\004\027\164" +
    "\001\002\000\010\030\uffb8\040\165\041\uffb8\001\002\000" +
    "\014\004\026\005\027\007\033\033\041\053\035\001\002" +
    "\000\010\030\uffb8\040\165\041\uffb8\001\002\000\006\030" +
    "\uffb5\041\171\001\002\000\004\030\174\001\002\000\004" +
    "\025\172\001\002\000\044\004\026\005\027\007\033\030" +
    "\uffe9\033\041\035\127\037\141\042\145\046\134\047\132" +
    "\050\012\053\035\054\021\055\022\057\016\060\131\061" +
    "\146\001\002\000\004\030\uffb6\001\002\000\052\004\uffba" +
    "\005\uffba\007\uffba\030\uffba\033\uffba\035\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\061\uffba\001" +
    "\002\000\006\030\uffb9\041\uffb9\001\002\000\004\025\177" +
    "\001\002\000\050\004\026\005\027\007\033\030\uffe9\033" +
    "\041\035\127\037\141\040\uffe9\041\uffe9\042\145\046\134" +
    "\047\132\050\012\053\035\054\021\055\022\057\016\060" +
    "\131\061\146\001\002\000\010\030\uffb7\040\uffb7\041\uffb7" +
    "\001\002\000\004\030\205\001\002\000\014\004\026\005" +
    "\027\007\033\033\041\053\035\001\002\000\004\024\204" +
    "\001\002\000\004\030\ufff1\001\002\000\020\043\ufff0\044" +
    "\ufff0\050\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\001\002" +
    "\000\052\004\uffe4\005\uffe4\007\uffe4\030\uffe4\033\uffe4\035" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\001\002\000\052\004\uffe8\005\uffe8\007\uffe8" +
    "\030\uffe8\033\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\057\uffe8\060\uffe8\061\uffe8\001\002\000\014\004" +
    "\026\005\027\007\033\033\041\053\035\001\002\000\004" +
    "\034\212\001\002\000\004\027\213\001\002\000\044\004" +
    "\026\005\027\007\033\030\uffe9\033\041\035\127\037\141" +
    "\042\145\046\134\047\132\050\012\053\035\054\021\055" +
    "\022\057\016\060\131\061\146\001\002\000\004\030\215" +
    "\001\002\000\052\004\uffaf\005\uffaf\007\uffaf\030\uffaf\033" +
    "\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\053\uffaf\054\uffaf\055\uffaf\057" +
    "\uffaf\060\uffaf\061\uffaf\001\002\000\052\004\uffe3\005\uffe3" +
    "\007\uffe3\030\uffe3\033\uffe3\035\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\001\002\000" +
    "\014\024\uffb2\050\012\054\021\055\022\057\016\001\002" +
    "\000\004\024\222\001\002\000\004\024\uffb3\001\002\000" +
    "\014\004\026\005\027\007\033\033\041\053\035\001\002" +
    "\000\004\024\224\001\002\000\016\004\026\005\027\007" +
    "\033\033\041\034\uffb0\053\035\001\002\000\004\034\227" +
    "\001\002\000\004\034\uffb1\001\002\000\004\027\230\001" +
    "\002\000\044\004\026\005\027\007\033\030\uffe9\033\041" +
    "\035\127\037\141\042\145\046\134\047\132\050\012\053" +
    "\035\054\021\055\022\057\016\060\131\061\146\001\002" +
    "\000\004\030\232\001\002\000\052\004\uffb4\005\uffb4\007" +
    "\uffb4\030\uffb4\033\uffb4\035\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002\000\004" +
    "\034\234\001\002\000\004\024\uffdf\001\002\000\012\030" +
    "\uffea\040\uffea\041\uffea\045\uffea\001\002\000\014\004\026" +
    "\005\027\007\033\033\041\053\035\001\002\000\004\034" +
    "\240\001\002\000\004\027\241\001\002\000\044\004\026" +
    "\005\027\007\033\030\uffe9\033\041\035\127\037\141\042" +
    "\145\046\134\047\132\050\012\053\035\054\021\055\022" +
    "\057\016\060\131\061\146\001\002\000\004\030\243\001" +
    "\002\000\054\004\uffae\005\uffae\007\uffae\030\uffae\033\uffae" +
    "\035\uffae\036\244\037\uffae\040\uffae\041\uffae\042\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\053\uffae\054\uffae\055\uffae" +
    "\057\uffae\060\uffae\061\uffae\001\002\000\004\027\245\001" +
    "\002\000\044\004\026\005\027\007\033\030\uffe9\033\041" +
    "\035\127\037\141\042\145\046\134\047\132\050\012\053" +
    "\035\054\021\055\022\057\016\060\131\061\146\001\002" +
    "\000\004\030\247\001\002\000\052\004\uffad\005\uffad\007" +
    "\uffad\030\uffad\033\uffad\035\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\045\uffad\046\uffad\047\uffad\050\uffad\053\uffad\054" +
    "\uffad\055\uffad\057\uffad\060\uffad\061\uffad\001\002\000\004" +
    "\033\115\001\002\000\004\027\uffac\001\002\000\004\027" +
    "\253\001\002\000\044\004\026\005\027\007\033\030\uffe9" +
    "\033\041\035\127\037\141\042\145\046\134\047\132\050" +
    "\012\053\035\054\021\055\022\057\016\060\131\061\146" +
    "\001\002\000\004\030\255\001\002\000\020\043\uffed\044" +
    "\uffed\050\uffed\054\uffed\055\uffed\056\uffed\057\uffed\001\002" +
    "\000\004\004\257\001\002\000\006\023\024\024\ufff6\001" +
    "\002\000\004\024\ufffa\001\002\000\004\034\262\001\002" +
    "\000\004\027\263\001\002\000\044\004\026\005\027\007" +
    "\033\030\uffe9\033\041\035\127\037\141\042\145\046\134" +
    "\047\132\050\012\053\035\054\021\055\022\057\016\060" +
    "\131\061\146\001\002\000\004\030\265\001\002\000\004" +
    "\002\000\001\002\000\020\043\ufffd\044\ufffd\050\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\057\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\003\004\004\003\001\001\000\014\005" +
    "\017\006\006\010\013\012\010\014\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\024\001\001\000" +
    "\020\014\036\025\027\026\031\027\033\030\035\031\037" +
    "\036\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\045\034\052" +
    "\035\100\037\047\040\054\041\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\041\026\031\027\033\030\035\036\030\001\001" +
    "\000\002\001\001\000\016\007\045\034\052\035\065\037" +
    "\047\040\054\041\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\066" +
    "\026\031\027\033\030\035\036\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\070\026\031\027" +
    "\033\030\035\036\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\073\026\031\027\033\030\035\036" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\077\026\031\027\033\030\035\036\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\105\026\031\027\033\030\035\036\030\001\001\000" +
    "\014\025\103\026\031\027\033\030\035\036\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\110\001\001\000\002\001\001" +
    "\000\006\011\112\032\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\006\134\014\016\015\137\016\127\017\125\020" +
    "\141\023\142\025\143\026\031\027\033\030\035\036\030" +
    "\042\136\046\135\047\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\134\014\016\015\234\016\127" +
    "\017\125\020\141\023\142\025\143\026\031\027\033\030" +
    "\035\036\030\042\136\046\135\047\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\031\027\033\030\035\036" +
    "\147\050\152\051\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\031\027\033\030\035\036\147\051\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\161\026\031\027\033\030\035\036\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\166\044\165\001\001\000\014\025\175\026\031\027\033" +
    "\030\035\036\030\001\001\000\006\043\174\044\165\001" +
    "\001\000\004\045\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\134\014\016\015\172\016\127\017" +
    "\125\020\141\023\142\025\143\026\031\027\033\030\035" +
    "\036\030\042\136\046\135\047\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\006\134\014\016\015\177\016\127\017\125\020" +
    "\141\023\142\025\143\026\031\027\033\030\035\036\030" +
    "\042\136\046\135\047\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\025\202\026\031\027\033\030\035" +
    "\036\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\210\026\031\027\033\030\035\036\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\134\014\016" +
    "\015\213\016\127\017\125\020\141\023\142\025\143\026" +
    "\031\027\033\030\035\036\030\042\136\046\135\047\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\220\014\016\021\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\222\026\031\027" +
    "\033\030\035\036\030\001\001\000\002\001\001\000\016" +
    "\022\224\025\225\026\031\027\033\030\035\036\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\006\134\014\016\015\230\016\127\017\125\020" +
    "\141\023\142\025\143\026\031\027\033\030\035\036\030" +
    "\042\136\046\135\047\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\236\026\031\027\033\030\035\036" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\006\134\014\016\015\241\016\127\017\125\020\141\023" +
    "\142\025\143\026\031\027\033\030\035\036\030\042\136" +
    "\046\135\047\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\006\134\014\016\015\245" +
    "\016\127\017\125\020\141\023\142\025\143\026\031\027" +
    "\033\030\035\036\030\042\136\046\135\047\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\250\032" +
    "\113\001\001\000\004\002\251\001\001\000\002\001\001" +
    "\000\040\006\134\014\016\015\253\016\127\017\125\020" +
    "\141\023\142\025\143\026\031\027\033\030\035\036\030" +
    "\042\136\046\135\047\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\134\014\016\015\263\016\127\017\125\020\141" +
    "\023\142\025\143\026\031\027\033\030\035\036\030\042" +
    "\136\046\135\047\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private TaulaSimbols ts=new TaulaSimbols();
    private Scanner scanner;
    private Semantic comprovaTipus=new Semantic(ts);
    private ArbreSintactic arbre=new ArbreSintactic();
    private codiTresAdreces codi=arbre.generarCodiTresAdreces();

    public Parser(Scanner scanner){
        this.scanner = scanner;
    }

    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
     * Variable utilitzada per emmagatzemar el darrer valor calculat.
     * Val 0 inicialment
     **/
    private double ans = 0;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolProgram start_val = (SymbolProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList r_main lparen rparen brop statementList brcl 
            {
              SymbolProgram RESULT =null;
		int declistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolDeclList declist = (SymbolDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolProgram(declist,states);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              SymbolDeclList RESULT =null;
		RESULT=new SymbolDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              SymbolDeclList RESULT =null;
		RESULT=new SymbolDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl smcol 
            {
              SymbolDecl RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVarDecl var = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolDecl(var,null,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= funcDecl 
            {
              SymbolDecl RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFuncDecl func = (SymbolFuncDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDecl(null,func,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= procDecl 
            {
              SymbolDecl RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolProcDecl proc = (SymbolProcDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDecl(null,null,proc);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDecl ::= r_const type id varInit 
            {
              SymbolVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        ts.afegeixSimbol(iden.toString(), t.getTipusSub(), Tipus.CONST, 0);
                                                        System.out.println("TAMANY TAULA SIMBOLS EXTERNA: "+ts.getMida());
                                                        if(comprovaTipus.gestAsigDecl(iden.toString(),varinit)){
                                                            RESULT=new SymbolVarDecl(true, t.getTipusSub(), iden.toString(),varinit);
                                                        } else{
                                                            RESULT=new SymbolVarDecl();
                                                        }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type id varInit 
            {
              SymbolVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        if(varinit.isIsarray()){
                                                                ts.afegeixSimbol(iden.toString(),t.getTipusSub(), Tipus.ARRAY,0);
                                                                System.out.println("TAMANY TAULA SIMBOLS EXTERNA: "+ts.getMida());
                                                                if(comprovaTipus.gestAsigDecl(iden.toString(),varinit)){
                                                                  RESULT=new SymbolVarDecl(false,t.getTipusSub(),iden.toString(),varinit);
                                                                  } else{
                                                                  RESULT=new SymbolVarDecl();
                                                                  }
                                                            }else{
                                                                System.out.println("TAMANY TAULA SIMBOLS EXTERNA: "+ts.getMida());
                                                                ts.afegeixSimbol(iden.toString(),t.getTipusSub(), Tipus.VAR,0);
                                                                if(comprovaTipus.gestAsigDecl(iden.toString(),varinit)){
                                                                    RESULT=new SymbolVarDecl(false,t.getTipusSub(),iden.toString(),varinit);
                                                                } else{
                                                                RESULT=new SymbolVarDecl();
                                                                }
                                                            }
                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varInit ::= asig exprSimple 
            {
              SymbolVarInit RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =new SymbolVarInit(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varInit ::= asig arrayInit 
            {
              SymbolVarInit RESULT =null;
		int arrayInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrayInit arrayInit = (SymbolArrayInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =new SymbolVarInit(arrayInit);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varInit ::= 
            {
              SymbolVarInit RESULT =null;
		RESULT = new SymbolVarInit(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arrayInit ::= type lop exprSimple lclose 
            {
              SymbolArrayInit RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =new  SymbolArrayInit(t.getTipusSub(),expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInit",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= r_int 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.INT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= r_bool 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= r_string 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.STRING);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return ::= r_return exprSimple smcol 
            {
              SymbolReturn RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolReturn(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDecl ::= r_function M type id funcCap brop statementList return brcl 
            {
              SymbolFuncDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcCapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int funcCapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolFuncCap funcCap = (SymbolFuncCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rtnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolReturn rtn = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                System.out.println("SIMBOL S: "+ts.getMida());

                                                                                Simbol s=ts.consultaFunc(iden.toString());
                                                                                System.out.println("SIMBOL S: "+s);
                                                                                if(s == null){
                                                                                    if(comprovaTipus.gestFunc(t.getTipusSub(),rtn)){
                                                                                        RESULT=new SymbolFuncDecl(t.getTipusSub(), iden.toString(), stats, rtn,funcCap);
                                                                                        ts.afegeixSimbol(iden.toString(), t.getTipusSub(), Tipus.FUNC, 0);
                                                                                        System.out.println("FUNCIÓ AFEGIDA COORECTAMENT!");
                                                                                    }

                                                                                }else{
                                                                                    System.out.println("FUNCIÓ JA CREADA ANTERIORMENT!");
                                                                                    RESULT=new SymbolFuncDecl();
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcCap ::= ContCap rparen 
            {
              SymbolFuncCap RESULT =null;
		int contcapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contcapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolContCap contcap = (SymbolContCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolFuncCap(contcap);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcCap ::= lparen rparen 
            {
              SymbolFuncCap RESULT =null;
		RESULT=new SymbolFuncCap();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procDecl ::= r_procedure id funcCap M brop statementList brcl 
            {
              SymbolProcDecl RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcCapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int funcCapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolFuncCap funcCap = (SymbolFuncCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =new SymbolProcDecl(iden.toString(), stats,funcCap);
                                                                                ts.afegeixSimbol(iden.toString(), TipusSub.NULL, Tipus.FUNC, 0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ContCap ::= lparen type id 
            {
              SymbolContCap RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                             ts.afegeixSimbol(iden.toString(),t.getTipusSub(),Tipus.PARAM,0);
                                                             RESULT = new SymbolContCap(t.getTipusSub(), iden.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContCap",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ContCap ::= ContCap com type id 
            {
              SymbolContCap RESULT =null;
		int contcapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int contcapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolContCap contcap = (SymbolContCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolContCap(contcap,t.getTipusSub(), iden.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContCap",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementList ::= statement statementList 
            {
              SymbolStatementList RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatement stat = (SymbolStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new SymbolStatementList(stat,stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementList ::= 
            {
              SymbolStatementList RESULT =null;
		RESULT=new SymbolStatementList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= varDecl smcol 
            {
              SymbolStatement RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVarDecl vard = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(vard);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= exprSimple smcol 
            {
              SymbolStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= forIteration 
            {
              SymbolStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolForIteration f = (SymbolForIteration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= whileStatement 
            {
              SymbolStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolWhileStatement w = (SymbolWhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(w);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= inputStatement smcol 
            {
              SymbolStatement RESULT =null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInputStatement input = (SymbolInputStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(input);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= printStatement smcol 
            {
              SymbolStatement RESULT =null;
		int printleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int printright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolPrintStatement print = (SymbolPrintStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(print);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= ifStatement 
            {
              SymbolStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIfStatement i = (SymbolIfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= SwitchCase 
            {
              SymbolStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwitchCase s = (SymbolSwitchCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= r_break smcol 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inputStatement ::= r_input lparen rparen 
            {
              SymbolInputStatement RESULT =null;
		RESULT = new SymbolInputStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputStatement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // printStatement ::= r_print lparen stringValue rparen 
            {
              SymbolPrintStatement RESULT =null;
		RESULT = new SymbolPrintStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStatement",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stringValue ::= literal 
            {
              SymbolStringValue RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringValue",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stringValue ::= stringValue add literal 
            {
              SymbolStringValue RESULT =null;
		RESULT = new SymbolStringValue();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringValue",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // literal ::= string 
            {
              SymbolLiteral RESULT =null;
		RESULT = new SymbolLiteral();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literal ::= valor 
            {
              SymbolLiteral RESULT =null;
		RESULT = new SymbolLiteral();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprSimple ::= lparen exprSimple rparen operacio 
            {
              SymbolExpressioSimple RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacio oper = (SymbolOperacio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            //Es una assignació
                                                            if(oper.isAssignacio()){
                                                                System.out.println("Aixo es una assignació invàlida");
                                                                RESULT=new SymbolExpressioSimple();
                                                            }else{
                                                                RESULT=new SymbolExpressioSimple(expr,oper);
                                                            }

                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprSimple ::= valor operacio 
            {
              SymbolExpressioSimple RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValor val = (SymbolValor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacio oper = (SymbolOperacio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            if(oper.isAssignacio()){
                                                                if(comprovaTipus.gestAsig(val,oper)){
                                                                   RESULT=new SymbolExpressioSimple(val, oper);
                                                                }
                                                            }else{
                                                                RESULT=new SymbolExpressioSimple(val,oper);
                                                            }

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= id 
            {
              SymbolValor RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Simbol s=ts.consulta(iden.toString());
                                            if(s!=null){
                                                RESULT=new SymbolValor(iden.toString(),s.getTipusSub());
                                            }else{
                                                //System.out.println("Aquesta variable no existeix");
                                                //he afegit null perque sinos el confonia amb el constructor de integer!
                                                //THROWS EXCEPTION??????
                                                RESULT=new SymbolValor(iden.toString(),TipusSub.INT);
                                            }
                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= array 
            {
              SymbolValor RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArray arr = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolValor(arr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= integer 
            {
              SymbolValor RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolValor(integer);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= bool 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor(true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= r_not lparen exprSimple rparen 
            {
              SymbolValor RESULT =null;
		int exprSimpleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprSimpleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple exprSimple = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolValor(exprSimple);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= subProgramCall 
            {
              SymbolValor RESULT =null;
		int subprogramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subprogramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSubProgramCall subprogram = (SymbolSubProgramCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolValor(subprogram);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array ::= id lop exprSimple lclose 
            {
              SymbolArray RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolArray(iden.toString(),expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacio ::= op exprSimple 
            {
              SymbolOperacio RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOp op = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOperacio(op,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacio ::= varInit 
            {
              SymbolOperacio RESULT =null;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOperacio(varinit);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op ::= boolOp 
            {
              SymbolOp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolOp bool = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(bool);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op ::= aritOp 
            {
              SymbolOp RESULT =null;
		int aritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAritOp arit = (SymbolAritOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(arit);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op ::= realOp 
            {
              SymbolOp RESULT =null;
		int realOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolRealOp realOp = (SymbolRealOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(realOp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolOp ::= r_and 
            {
              SymbolBoolOp RESULT =null;
		RESULT = new SymbolBoolOp(Operacions.AND);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // boolOp ::= r_or 
            {
              SymbolBoolOp RESULT =null;
		RESULT = new SymbolBoolOp(Operacions.OR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // aritOp ::= add 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.ADD);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // aritOp ::= sub 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.SUB);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aritOp ::= mul 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.MUL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aritOp ::= div 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.DIV);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aritOp ::= mod 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.MOD);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // realOp ::= neg 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.NEG);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // realOp ::= eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.EQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // realOp ::= bg 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.BG);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // realOp ::= sm 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.SM);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // realOp ::= bg_eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.BGEQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // realOp ::= sm_eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.SMEQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // subProgramCall ::= id lparen rparen 
            {
              SymbolSubProgramCall RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new SymbolSubProgramCall(iden.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // subProgramCall ::= subProgramContCall rparen 
            {
              SymbolSubProgramCall RESULT =null;
		int subprogcontcallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int subprogcontcallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSubProgramContCall subprogcontcall = (SymbolSubProgramContCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolSubProgramCall(subprogcontcall);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // subProgramContCall ::= id lparen exprSimple 
            {
              SymbolSubProgramContCall RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolSubProgramContCall(iden.toString(), expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // subProgramContCall ::= subProgramContCall com exprSimple 
            {
              SymbolSubProgramContCall RESULT =null;
		int subprogcontcallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int subprogcontcallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolSubProgramContCall subprogcontcall = (SymbolSubProgramContCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolSubProgramContCall(subprogcontcall, expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SwitchCase ::= r_switch lparen exprSimple rparen brop LCases Default brcl 
            {
              SymbolSwitchCase RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lcasesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lcasesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolLCases lcases = (SymbolLCases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new SymbolSwitchCase(expr,lcases);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LCases ::= Case LCases 
            {
              SymbolLCases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCase c = (SymbolCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lcasesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcasesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLCases lcases = (SymbolLCases)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolLCases(c,lcases);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LCases ::= 
            {
              SymbolLCases RESULT =null;
		RESULT = new SymbolLCases();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Case ::= r_case exprSimple twodots statementList 
            {
              SymbolCase RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolCase(expr,state);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Default ::= r_default twodots statementList 
            {
              SymbolDefault RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDefault(state);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Default ::= 
            {
              SymbolDefault RESULT =null;
		RESULT = new SymbolDefault();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // forIteration ::= r_for lparen forInit smcol exprSimple smcol forPostExpression rparen brop statementList brcl 
            {
              SymbolForIteration RESULT =null;
		int forinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int forinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolForInit forinit = (SymbolForInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int forpostleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int forpostright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolForPostExpression forpost = (SymbolForPostExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN)){
                                                               RESULT = new SymbolForIteration(forinit,expr,forpost,state);
                                                               System.out.print("Això ES CORRECTE AL FOR");
                                                         }else{
                                                              RESULT = new SymbolForIteration();
                                                              System.out.print("   Aixó NO ES CORRECTE AL FOR");
                                                         }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forIteration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // forInit ::= varDecl 
            {
              SymbolForInit RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarDecl vardecl = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolForInit(vardecl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // forInit ::= 
            {
              SymbolForInit RESULT =null;
		RESULT = new SymbolForInit();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // forPostExpression ::= exprSimple 
            {
              SymbolForPostExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolForPostExpression(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // forPostExpression ::= 
            {
              SymbolForPostExpression RESULT =null;
		RESULT = new SymbolForPostExpression();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // whileStatement ::= r_while lparen exprSimple rparen brop statementList brcl 
            {
              SymbolWhileStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN)){
                                                        RESULT = new SymbolWhileStatement(expr,state);
                                                        System.out.print("Això ES CORRECTE AL WHILE");
                                                     }else{
                                                          RESULT = new SymbolWhileStatement();
                                                          System.out.print("   Aixó NO ES CORRECTE AL WHILE");
                                                    }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ifStatement ::= r_if lparen exprSimple rparen brop statementList brcl 
            {
              SymbolIfStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN)){
                                             RESULT = new SymbolIfStatement(expr,states);
                                           }else{
                                              RESULT = new SymbolIfStatement();
                                            System.out.print("   Aixó NO ES CORRECTE AL WHILE");
                                           }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ifStatement ::= r_if lparen exprSimple rparen brop statementList brcl r_else brop statementList brcl 
            {
              SymbolIfStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int statelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int statelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolStatementList statel = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN)){
                                                                      RESULT = new SymbolIfStatement(expr,states);
                                                                  }else{
                                                                       RESULT = new SymbolIfStatement();
                                                                      System.out.print("   Aixó NO ES CORRECTE AL IF");
                                                                 }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // M ::= 
            {
              Object RESULT =null;
		ts.afegeixNivell();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
