
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import compiler.Symbols.TaulaSimbols.*;
import compiler.ArbreSintactic.*;
import compiler.GeneracioCodiIntermedi.*;
import compiler.Semantic.Semantic;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}
//
//  /** Default constructor. */
//  @Deprecated
//  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\003\011\000\002\004" +
    "\004\000\002\004\002\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\006\006\000\002\006\005\000" +
    "\002\006\006\000\002\007\004\000\002\007\004\000\002" +
    "\007\002\000\002\031\006\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\033\005\000\002\010\013" +
    "\000\002\011\004\000\002\011\004\000\002\012\011\000" +
    "\002\032\006\000\002\032\007\000\002\013\003\000\002" +
    "\013\002\000\002\015\004\000\002\015\002\000\002\016" +
    "\004\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\004\000\002\046\005\000\002" +
    "\047\006\000\002\050\003\000\002\050\005\000\002\051" +
    "\003\000\002\051\003\000\002\025\006\000\002\025\004" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\004\000\002\036\006\000\002" +
    "\036\003\000\002\030\006\000\002\035\004\000\002\035" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\026\005\000\002\026\004\000\002\027\005\000" +
    "\002\027\005\000\002\042\012\000\002\043\004\000\002" +
    "\043\002\000\002\044\006\000\002\045\005\000\002\045" +
    "\002\000\002\020\015\000\002\021\003\000\002\021\002" +
    "\000\002\022\003\000\002\022\002\000\002\017\011\000" +
    "\002\023\011\000\002\023\015\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\020\043\ufffe\044\ufffe\050\ufffe\054\ufffe\055" +
    "\ufffe\056\ufffe\057\ufffe\001\002\000\020\043\015\044\012" +
    "\050\013\054\021\055\022\056\010\057\016\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\006" +
    "\024\275\026\213\001\002\000\004\033\270\001\002\000" +
    "\020\043\ufffb\044\ufffb\050\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\001\002\000\004\004\262\001\002\000\010\054" +
    "\021\055\022\057\016\001\002\000\020\043\ufffc\044\ufffc" +
    "\050\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\001\002\000" +
    "\010\054\021\055\022\057\016\001\002\000\006\004\ufff1" +
    "\031\ufff1\001\002\000\004\004\023\001\002\000\020\043" +
    "\uffff\044\uffff\050\uffff\054\uffff\055\uffff\056\uffff\057\uffff" +
    "\001\002\000\006\004\ufff3\031\ufff3\001\002\000\006\004" +
    "\ufff2\031\ufff2\001\002\000\010\023\024\024\ufff5\026\ufff5" +
    "\001\002\000\022\004\026\005\027\007\032\033\041\053" +
    "\035\054\021\055\022\057\016\001\002\000\006\024\ufff9" +
    "\026\ufff9\001\002\000\054\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\031\103\032" +
    "\uffd4\033\104\034\uffd4\051\uffd4\052\uffd4\001\002\000\050" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\032\uffd1\034\uffd1\051\uffd1\052\uffd1\001" +
    "\002\000\014\024\ufff7\025\ufff7\026\ufff7\032\ufff7\034\ufff7" +
    "\001\002\000\050\010\047\011\062\012\051\013\060\014" +
    "\065\015\045\016\057\017\052\020\061\021\056\022\064" +
    "\023\024\024\ufff5\025\ufff5\026\ufff5\032\ufff5\034\ufff5\051" +
    "\054\052\063\001\002\000\050\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\032\uffd2" +
    "\034\uffd2\051\uffd2\052\uffd2\001\002\000\050\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\032\uffce\034\uffce\051\uffce\052\uffce\001\002\000\006" +
    "\026\077\034\100\001\002\000\006\005\073\033\074\001" +
    "\002\000\050\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\032\uffd3\034\uffd3\051\uffd3" +
    "\052\uffd3\001\002\000\004\031\070\001\002\000\014\024" +
    "\ufff6\025\ufff6\026\ufff6\032\ufff6\034\ufff6\001\002\000\014" +
    "\004\026\005\027\007\032\033\041\053\035\001\002\000" +
    "\004\034\043\001\002\000\050\010\047\011\062\012\051" +
    "\013\060\014\065\015\045\016\057\017\052\020\061\021" +
    "\056\022\064\023\024\024\ufff5\025\ufff5\026\ufff5\032\ufff5" +
    "\034\ufff5\051\054\052\063\001\002\000\014\004\uffc8\005" +
    "\uffc8\007\uffc8\033\uffc8\053\uffc8\001\002\000\014\004\uffc0" +
    "\005\uffc0\007\uffc0\033\uffc0\053\uffc0\001\002\000\014\024" +
    "\uffcb\025\uffcb\026\uffcb\032\uffcb\034\uffcb\001\002\000\014" +
    "\004\uffbe\005\uffbe\007\uffbe\033\uffbe\053\uffbe\001\002\000" +
    "\014\004\uffca\005\uffca\007\uffca\033\uffca\053\uffca\001\002" +
    "\000\014\004\uffbc\005\uffbc\007\uffbc\033\uffbc\053\uffbc\001" +
    "\002\000\014\004\uffc4\005\uffc4\007\uffc4\033\uffc4\053\uffc4" +
    "\001\002\000\014\004\026\005\027\007\032\033\041\053" +
    "\035\001\002\000\014\004\uffc7\005\uffc7\007\uffc7\033\uffc7" +
    "\053\uffc7\001\002\000\014\004\uffc9\005\uffc9\007\uffc9\033" +
    "\uffc9\053\uffc9\001\002\000\014\004\uffc2\005\uffc2\007\uffc2" +
    "\033\uffc2\053\uffc2\001\002\000\014\004\uffc5\005\uffc5\007" +
    "\uffc5\033\uffc5\053\uffc5\001\002\000\014\004\uffbb\005\uffbb" +
    "\007\uffbb\033\uffbb\053\uffbb\001\002\000\014\004\uffc3\005" +
    "\uffc3\007\uffc3\033\uffc3\053\uffc3\001\002\000\014\004\uffbd" +
    "\005\uffbd\007\uffbd\033\uffbd\053\uffbd\001\002\000\014\004" +
    "\uffc6\005\uffc6\007\uffc6\033\uffc6\053\uffc6\001\002\000\014" +
    "\004\uffc1\005\uffc1\007\uffc1\033\uffc1\053\uffc1\001\002\000" +
    "\014\004\uffbf\005\uffbf\007\uffbf\033\uffbf\053\uffbf\001\002" +
    "\000\014\024\uffd6\025\uffd6\026\uffd6\032\uffd6\034\uffd6\001" +
    "\002\000\014\024\uffcc\025\uffcc\026\uffcc\032\uffcc\034\uffcc" +
    "\001\002\000\014\004\026\005\027\007\032\033\041\053" +
    "\035\001\002\000\004\032\072\001\002\000\014\024\ufff4" +
    "\025\ufff4\026\ufff4\032\ufff4\034\ufff4\001\002\000\050\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\032\uffd0\034\uffd0\051\uffd0\052\uffd0\001\002" +
    "\000\014\004\026\005\027\007\032\033\041\053\035\001" +
    "\002\000\004\034\076\001\002\000\050\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\032\uffcf\034\uffcf\051\uffcf\052\uffcf\001\002\000\014\004" +
    "\026\005\027\007\032\033\041\053\035\001\002\000\050" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\032\uffb9\034\uffb9\051\uffb9\052\uffb9\001" +
    "\002\000\006\026\uffb7\034\uffb7\001\002\000\014\024\uffd5" +
    "\025\uffd5\026\uffd5\032\uffd5\034\uffd5\001\002\000\014\004" +
    "\026\005\027\007\032\033\041\053\035\001\002\000\016" +
    "\004\026\005\027\007\032\033\041\034\106\053\035\001" +
    "\002\000\006\026\uffb8\034\uffb8\001\002\000\050\010\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\032\uffba\034\uffba\051\uffba\052\uffba\001\002\000" +
    "\004\032\110\001\002\000\050\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\032\uffcd" +
    "\034\uffcd\051\uffcd\052\uffcd\001\002\000\004\004\112\001" +
    "\002\000\004\033\115\001\002\000\004\027\uffa8\001\002" +
    "\000\006\026\123\034\124\001\002\000\014\034\117\050" +
    "\120\054\uffe8\055\uffe8\057\uffe8\001\002\000\010\054\021" +
    "\055\022\057\016\001\002\000\004\027\uffed\001\002\000" +
    "\010\054\uffe9\055\uffe9\057\uffe9\001\002\000\004\004\122" +
    "\001\002\000\006\026\uffeb\034\uffeb\001\002\000\012\050" +
    "\120\054\uffe8\055\uffe8\057\uffe8\001\002\000\004\027\uffee" +
    "\001\002\000\010\054\021\055\022\057\016\001\002\000" +
    "\004\004\127\001\002\000\006\026\uffea\034\uffea\001\002" +
    "\000\004\027\131\001\002\000\044\004\026\005\027\007" +
    "\032\033\041\035\134\037\145\042\150\045\uffe6\046\140" +
    "\047\136\050\013\053\035\054\021\055\022\057\016\060" +
    "\135\061\152\001\002\000\052\004\uffe2\005\uffe2\007\uffe2" +
    "\030\uffe2\033\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000\052\004" +
    "\026\005\027\007\032\030\uffe6\033\041\035\134\037\145" +
    "\040\uffe6\041\uffe6\042\150\045\uffe6\046\140\047\136\050" +
    "\013\053\035\054\021\055\022\057\016\060\135\061\152" +
    "\001\002\000\004\033\244\001\002\000\004\033\242\001" +
    "\002\000\004\033\226\001\002\000\004\024\225\001\002" +
    "\000\004\033\217\001\002\000\006\024\214\026\213\001" +
    "\002\000\004\024\212\001\002\000\052\004\uffde\005\uffde" +
    "\007\uffde\030\uffde\033\uffde\035\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\045\uffde\046\uffde\047\uffde\050\uffde\053\uffde" +
    "\054\uffde\055\uffde\057\uffde\060\uffde\061\uffde\001\002\000" +
    "\004\045\206\001\002\000\004\033\165\001\002\000\052" +
    "\004\uffe3\005\uffe3\007\uffe3\030\uffe3\033\uffe3\035\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\001\002\000\052\004\uffdf\005\uffdf\007\uffdf\030\uffdf" +
    "\033\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\001\002\000\004\024\164\001" +
    "\002\000\004\024\163\001\002\000\004\033\153\001\002" +
    "\000\014\004\026\005\027\006\155\007\032\053\035\001" +
    "\002\000\006\016\uffd7\034\uffd7\001\002\000\006\016\uffd8" +
    "\034\uffd8\001\002\000\006\016\uffda\034\uffda\001\002\000" +
    "\006\016\161\034\160\001\002\000\004\024\uffdb\001\002" +
    "\000\014\004\026\005\027\006\155\007\032\053\035\001" +
    "\002\000\006\016\uffd9\034\uffd9\001\002\000\052\004\uffe4" +
    "\005\uffe4\007\uffe4\030\uffe4\033\uffe4\035\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4\001" +
    "\002\000\052\004\uffdd\005\uffdd\007\uffdd\030\uffdd\033\uffdd" +
    "\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\001\002\000\014\004\026\005\027\007" +
    "\032\033\041\053\035\001\002\000\004\034\167\001\002" +
    "\000\004\027\170\001\002\000\010\030\uffb4\040\171\041" +
    "\uffb4\001\002\000\014\004\026\005\027\007\032\033\041" +
    "\053\035\001\002\000\010\030\uffb4\040\171\041\uffb4\001" +
    "\002\000\006\030\uffb1\041\175\001\002\000\004\030\200" +
    "\001\002\000\004\025\176\001\002\000\044\004\026\005" +
    "\027\007\032\030\uffe6\033\041\035\134\037\145\042\150" +
    "\046\140\047\136\050\013\053\035\054\021\055\022\057" +
    "\016\060\135\061\152\001\002\000\004\030\uffb2\001\002" +
    "\000\052\004\uffb6\005\uffb6\007\uffb6\030\uffb6\033\uffb6\035" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\053\uffb6\054\uffb6\055\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\001\002\000\006\030\uffb5\041\uffb5\001\002" +
    "\000\004\025\203\001\002\000\050\004\026\005\027\007" +
    "\032\030\uffe6\033\041\035\134\037\145\040\uffe6\041\uffe6" +
    "\042\150\046\140\047\136\050\013\053\035\054\021\055" +
    "\022\057\016\060\135\061\152\001\002\000\010\030\uffb3" +
    "\040\uffb3\041\uffb3\001\002\000\004\030\211\001\002\000" +
    "\014\004\026\005\027\007\032\033\041\053\035\001\002" +
    "\000\004\024\210\001\002\000\004\030\ufff0\001\002\000" +
    "\020\043\uffef\044\uffef\050\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\001\002\000\052\004\uffe1\005\uffe1\007\uffe1\030" +
    "\uffe1\033\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\001\002\000\004\004\215" +
    "\001\002\000\052\004\uffe5\005\uffe5\007\uffe5\030\uffe5\033" +
    "\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\053\uffe5\054\uffe5\055\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\001\002\000\010\023\024\024\ufff5" +
    "\026\ufff5\001\002\000\006\024\ufff8\026\ufff8\001\002\000" +
    "\014\004\026\005\027\007\032\033\041\053\035\001\002" +
    "\000\004\034\221\001\002\000\004\027\222\001\002\000" +
    "\044\004\026\005\027\007\032\030\uffe6\033\041\035\134" +
    "\037\145\042\150\046\140\047\136\050\013\053\035\054" +
    "\021\055\022\057\016\060\135\061\152\001\002\000\004" +
    "\030\224\001\002\000\052\004\uffab\005\uffab\007\uffab\030" +
    "\uffab\033\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\053\uffab\054\uffab\055" +
    "\uffab\057\uffab\060\uffab\061\uffab\001\002\000\052\004\uffe0" +
    "\005\uffe0\007\uffe0\030\uffe0\033\uffe0\035\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\057\uffe0\060\uffe0\061\uffe0\001" +
    "\002\000\014\024\uffae\050\013\054\021\055\022\057\016" +
    "\001\002\000\004\024\231\001\002\000\006\024\uffaf\026" +
    "\213\001\002\000\014\004\026\005\027\007\032\033\041" +
    "\053\035\001\002\000\004\024\233\001\002\000\016\004" +
    "\026\005\027\007\032\033\041\034\uffac\053\035\001\002" +
    "\000\004\034\236\001\002\000\004\034\uffad\001\002\000" +
    "\004\027\237\001\002\000\044\004\026\005\027\007\032" +
    "\030\uffe6\033\041\035\134\037\145\042\150\046\140\047" +
    "\136\050\013\053\035\054\021\055\022\057\016\060\135" +
    "\061\152\001\002\000\004\030\241\001\002\000\052\004" +
    "\uffb0\005\uffb0\007\uffb0\030\uffb0\033\uffb0\035\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\001\002\000\004\034\243\001\002\000\004\024\uffdc\001" +
    "\002\000\014\004\026\005\027\007\032\033\041\053\035" +
    "\001\002\000\004\034\246\001\002\000\004\027\247\001" +
    "\002\000\044\004\026\005\027\007\032\030\uffe6\033\041" +
    "\035\134\037\145\042\150\046\140\047\136\050\013\053" +
    "\035\054\021\055\022\057\016\060\135\061\152\001\002" +
    "\000\004\030\251\001\002\000\054\004\uffaa\005\uffaa\007" +
    "\uffaa\030\uffaa\033\uffaa\035\uffaa\036\252\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\057\uffaa\060\uffaa\061\uffaa\001\002" +
    "\000\004\027\253\001\002\000\044\004\026\005\027\007" +
    "\032\030\uffe6\033\041\035\134\037\145\042\150\046\140" +
    "\047\136\050\013\053\035\054\021\055\022\057\016\060" +
    "\135\061\152\001\002\000\004\030\255\001\002\000\052" +
    "\004\uffa9\005\uffa9\007\uffa9\030\uffa9\033\uffa9\035\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\053\uffa9\054\uffa9\055\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\001\002\000\012\030\uffe7\040\uffe7\041\uffe7\045\uffe7" +
    "\001\002\000\004\004\260\001\002\000\010\023\024\024" +
    "\ufff5\026\ufff5\001\002\000\006\024\ufffa\026\ufffa\001\002" +
    "\000\004\033\115\001\002\000\004\027\uffa8\001\002\000" +
    "\004\027\265\001\002\000\044\004\026\005\027\007\032" +
    "\030\uffe6\033\041\035\134\037\145\042\150\046\140\047" +
    "\136\050\013\053\035\054\021\055\022\057\016\060\135" +
    "\061\152\001\002\000\004\030\267\001\002\000\020\043" +
    "\uffec\044\uffec\050\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\001\002\000\004\034\271\001\002\000\004\027\272\001" +
    "\002\000\044\004\026\005\027\007\032\030\uffe6\033\041" +
    "\035\134\037\145\042\150\046\140\047\136\050\013\053" +
    "\035\054\021\055\022\057\016\060\135\061\152\001\002" +
    "\000\004\030\274\001\002\000\004\002\000\001\002\000" +
    "\020\043\ufffd\044\ufffd\050\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\006\003\004\004\003\001\001\000\014\005" +
    "\017\006\006\010\013\012\010\014\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\256" +
    "\001\001\000\002\001\001\000\004\014\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\024\001\001\000" +
    "\020\014\036\025\027\026\032\027\033\030\035\031\037" +
    "\036\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\045\034\052" +
    "\035\101\037\047\040\054\041\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\041\026\032\027\033\030\035\036\030\001\001" +
    "\000\002\001\001\000\016\007\045\034\052\035\065\037" +
    "\047\040\054\041\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\066" +
    "\026\032\027\033\030\035\036\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\070\026\032\027" +
    "\033\030\035\036\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\074\026\032\027" +
    "\033\030\035\036\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\100\026\032\027\033\030\035\036" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\106\026\032\027\033\030\035\036" +
    "\030\001\001\000\014\025\104\026\032\027\033\030\035" +
    "\036\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\112\032\113\001\001\000\004\002\127\001\001\000" +
    "\002\001\001\000\004\013\115\001\001\000\004\014\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\124\001\001\000\002" +
    "\001\001\000\004\014\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\140\014\016" +
    "\015\143\016\132\017\131\020\145\023\146\025\150\026" +
    "\032\027\033\030\035\036\030\042\142\046\141\047\136" +
    "\001\001\000\002\001\001\000\040\006\140\014\016\015" +
    "\255\016\132\017\131\020\145\023\146\025\150\026\032" +
    "\027\033\030\035\036\030\042\142\046\141\047\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\026\032\027\033\030\035\036\153\050\156\051\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\032\027" +
    "\033\030\035\036\153\051\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\025\165\026" +
    "\032\027\033\030\035\036\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\172\044\171\001\001\000" +
    "\014\025\201\026\032\027\033\030\035\036\030\001\001" +
    "\000\006\043\200\044\171\001\001\000\004\045\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\140" +
    "\014\016\015\176\016\132\017\131\020\145\023\146\025" +
    "\150\026\032\027\033\030\035\036\030\042\142\046\141" +
    "\047\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\140\014\016" +
    "\015\203\016\132\017\131\020\145\023\146\025\150\026" +
    "\032\027\033\030\035\036\030\042\142\046\141\047\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\206\026\032\027\033\030\035\036\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\215" +
    "\001\001\000\002\001\001\000\014\025\217\026\032\027" +
    "\033\030\035\036\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\140\014\016\015\222\016\132\017" +
    "\131\020\145\023\146\025\150\026\032\027\033\030\035" +
    "\036\030\042\142\046\141\047\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\227" +
    "\014\016\021\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\231\026\032\027\033\030\035\036\030" +
    "\001\001\000\002\001\001\000\016\022\233\025\234\026" +
    "\032\027\033\030\035\036\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\140\014" +
    "\016\015\237\016\132\017\131\020\145\023\146\025\150" +
    "\026\032\027\033\030\035\036\030\042\142\046\141\047" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\244\026\032\027" +
    "\033\030\035\036\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\140\014\016\015\247\016\132\017" +
    "\131\020\145\023\146\025\150\026\032\027\033\030\035" +
    "\036\030\042\142\046\141\047\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\140" +
    "\014\016\015\253\016\132\017\131\020\145\023\146\025" +
    "\150\026\032\027\033\030\035\036\030\042\142\046\141" +
    "\047\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\260\001\001" +
    "\000\002\001\001\000\006\011\262\032\113\001\001\000" +
    "\004\002\263\001\001\000\002\001\001\000\040\006\140" +
    "\014\016\015\265\016\132\017\131\020\145\023\146\025" +
    "\150\026\032\027\033\030\035\036\030\042\142\046\141" +
    "\047\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\140\014\016" +
    "\015\272\016\132\017\131\020\145\023\146\025\150\026" +
    "\032\027\033\030\035\036\030\042\142\046\141\047\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private TaulaSimbols ts=new TaulaSimbols();
    private Scanner scanner;
    private Semantic comprovaTipus=new Semantic(ts);
    private ArbreSintactic arbre=new ArbreSintactic();
    private codiTresAdreces codi=arbre.generarCodiTresAdreces();

    public Parser(Scanner scanner){
        this.scanner = scanner;
    }

    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
     * Variable utilitzada per emmagatzemar el darrer valor calculat.
     * Val 0 inicialment
     **/
    private double ans = 0;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolProgram start_val = (SymbolProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList r_main lparen rparen brop statementList brcl 
            {
              SymbolProgram RESULT =null;
		int declistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolDeclList declist = (SymbolDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolProgram(declist,states);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              SymbolDeclList RESULT =null;
		RESULT=new SymbolDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              SymbolDeclList RESULT =null;
		RESULT=new SymbolDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl smcol 
            {
              SymbolDecl RESULT =null;
		RESULT = new SymbolDecl(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= funcDecl 
            {
              SymbolDecl RESULT =null;
		RESULT = new SymbolDecl(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= procDecl 
            {
              SymbolDecl RESULT =null;
		RESULT = new SymbolDecl(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDecl ::= r_const type id varInit 
            {
              SymbolVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolVarDecl(true, t.getTipusSub(), iden.toString(),varinit,codi);
                                                        ts.afegeixSimbol(iden.toString(), t.getTipusSub(), Tipus.CONST, 0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type id varInit 
            {
              SymbolVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolVarDecl(false,t.getTipusSub(),iden.toString(),varinit,codi);
                                                        if(varinit.isIsarray()){
                                                                ts.afegeixSimbol(iden.toString(),t.getTipusSub(), Tipus.ARRAY,0);
                                                            }
                                                            else{
                                                                ts.afegeixSimbol(iden.toString(),t.getTipusSub(), Tipus.VAR,0);
                                                            }
                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDecl ::= varDecl com id varInit 
            {
              SymbolVarDecl RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolVarDecl vard = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolVarDecl(vard.esConst(), vard.getTipusSub(), iden.toString(),varinit,codi);
                                                        if(vard.esConst()){
                                                            ts.afegeixSimbol(iden.toString(),vard.getTipusSub(), Tipus.CONST,0);
                                                        }
                                                        else{
                                                            ts.afegeixSimbol(iden.toString(),vard.getTipusSub(), Tipus.VAR,0);
                                                        }
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varInit ::= asig exprSimple 
            {
              SymbolVarInit RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =new SymbolVarInit(expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varInit ::= asig arrayInit 
            {
              SymbolVarInit RESULT =null;
		int arrayInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrayInit arrayInit = (SymbolArrayInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =new SymbolVarInit(arrayInit,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varInit ::= 
            {
              SymbolVarInit RESULT =null;
		RESULT = new SymbolVarInit(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arrayInit ::= type lop exprSimple lclose 
            {
              SymbolArrayInit RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =new  SymbolArrayInit(t.getTipusSub(),expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInit",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= r_int 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.INT,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= r_bool 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.BOOLEAN,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= r_string 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.STRING,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // return ::= r_return exprSimple smcol 
            {
              SymbolReturn RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolReturn(expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcDecl ::= r_function type id funcCap M brop statementList return brcl 
            {
              SymbolFuncDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int funcCapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int funcCapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolFuncCap funcCap = (SymbolFuncCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rtnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolReturn rtn = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                System.out.println("SIMBOL S: "+ts.getMida());

                                                                                Simbol s=ts.consultaFunc(iden.toString());
                                                                                System.out.println("SIMBOL S: "+s);
                                                                                if(s == null){
                                                                                    if(comprovaTipus.gestFunc(t.getTipusSub(),rtn)){
                                                                                        RESULT=new SymbolFuncDecl(t.getTipusSub(), iden.toString(), stats, rtn,funcCap,codi);
                                                                                        ts.afegeixSimbol(iden.toString(), t.getTipusSub(), Tipus.FUNC, 0);
                                                                                    }

                                                                                }else{
                                                                                    System.out.println("FUNCIÓ JA CREADA ANTERIORMENT!");
                                                                                    RESULT=new SymbolFuncDecl();
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcCap ::= ContCap rparen 
            {
              SymbolFuncCap RESULT =null;
		int contcapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contcapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolContCap contcap = (SymbolContCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolFuncCap(contcap,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcCap ::= lparen rparen 
            {
              SymbolFuncCap RESULT =null;
		RESULT=new SymbolFuncCap(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procDecl ::= r_procedure id funcCap M brop statementList brcl 
            {
              SymbolProcDecl RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcCapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int funcCapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolFuncCap funcCap = (SymbolFuncCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =new SymbolProcDecl(iden.toString(), stats,funcCap,codi);
                                                                                ts.afegeixSimbol(iden.toString(), TipusSub.NULL, Tipus.FUNC, 0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ContCap ::= lparen argType type id 
            {
              SymbolContCap RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolArgType arg = (SymbolArgType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolContCap(arg,t.getTipusSub(), iden.toString(),codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContCap",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ContCap ::= ContCap com argType type id 
            {
              SymbolContCap RESULT =null;
		int contcapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int contcapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolContCap contcap = (SymbolContCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolArgType arg = (SymbolArgType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolContCap(contcap,arg,t.getTipusSub(), iden.toString(),codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContCap",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argType ::= r_const 
            {
              SymbolArgType RESULT =null;
		RESULT = new SymbolArgType(true,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argType ::= 
            {
              SymbolArgType RESULT =null;
		RESULT = new SymbolArgType(false,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statementList ::= statement statementList 
            {
              SymbolStatementList RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatement stat = (SymbolStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new SymbolStatementList(stat,stats,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statementList ::= 
            {
              SymbolStatementList RESULT =null;
		RESULT=new SymbolStatementList(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= varDecl smcol 
            {
              SymbolStatement RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVarDecl vard = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(vard,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= exprSimple smcol 
            {
              SymbolStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= forIteration 
            {
              SymbolStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolForIteration f = (SymbolForIteration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(f,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= whileStatement 
            {
              SymbolStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolWhileStatement w = (SymbolWhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(w,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= inputStatement smcol 
            {
              SymbolStatement RESULT =null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInputStatement input = (SymbolInputStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(input,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= printStatement smcol 
            {
              SymbolStatement RESULT =null;
		int printleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int printright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolPrintStatement print = (SymbolPrintStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(print,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= ifStatement 
            {
              SymbolStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIfStatement i = (SymbolIfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(i,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= SwitchCase 
            {
              SymbolStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwitchCase s = (SymbolSwitchCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(s,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= r_break smcol 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inputStatement ::= r_input lparen rparen 
            {
              SymbolInputStatement RESULT =null;
		RESULT = new SymbolInputStatement(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputStatement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // printStatement ::= r_print lparen stringValue rparen 
            {
              SymbolPrintStatement RESULT =null;
		RESULT = new SymbolPrintStatement(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStatement",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stringValue ::= literal 
            {
              SymbolStringValue RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringValue",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stringValue ::= stringValue add literal 
            {
              SymbolStringValue RESULT =null;
		RESULT = new SymbolStringValue(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringValue",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literal ::= string 
            {
              SymbolLiteral RESULT =null;
		RESULT = new SymbolLiteral(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literal ::= valor 
            {
              SymbolLiteral RESULT =null;
		RESULT = new SymbolLiteral(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprSimple ::= lparen exprSimple rparen operacio 
            {
              SymbolExpressioSimple RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacio oper = (SymbolOperacio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolExpressioSimple(expr,oper,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprSimple ::= valor operacio 
            {
              SymbolExpressioSimple RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValor val = (SymbolValor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacio oper = (SymbolOperacio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolExpressioSimple(val, oper,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= id 
            {
              SymbolValor RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Simbol s=ts.consulta(iden.toString());
                                            if(s!=null){
                                                RESULT=new SymbolValor(iden.toString(),s.getTipusSub(),codi);
                                            }else{
                                                //System.out.println("Aquesta variable no existeix");
                                                //he afegit null perque sinos el confonia amb el constructor de integer!
                                                //THROWS EXCEPTION??????
                                                RESULT=new SymbolValor(iden.toString(),TipusSub.INT,codi);
                                            }
                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= array 
            {
              SymbolValor RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArray arr = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolValor(arr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= integer 
            {
              SymbolValor RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolValor(integer,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor ::= bool 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor(true,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor ::= r_not bool 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor(false,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valor ::= r_not lparen exprSimple rparen 
            {
              SymbolValor RESULT =null;
		int exprSimpleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprSimpleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple exprSimple = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolValor(exprSimple,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor ::= subProgramCall 
            {
              SymbolValor RESULT =null;
		int subprogramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subprogramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSubProgramCall subprogram = (SymbolSubProgramCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolValor(subprogram,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array ::= id lop exprSimple lclose 
            {
              SymbolArray RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolArray(iden.toString(),expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacio ::= op exprSimple 
            {
              SymbolOperacio RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOp op = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOperacio(op,expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacio ::= varInit 
            {
              SymbolOperacio RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit vard = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOperacio(vard,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op ::= boolOp 
            {
              SymbolOp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolOp bool = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(bool,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op ::= aritOp 
            {
              SymbolOp RESULT =null;
		int aritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAritOp arit = (SymbolAritOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(arit,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op ::= realOp 
            {
              SymbolOp RESULT =null;
		int realOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolRealOp realOp = (SymbolRealOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(realOp,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // boolOp ::= r_and 
            {
              SymbolBoolOp RESULT =null;
		RESULT = new SymbolBoolOp(Operacions.AND,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // boolOp ::= r_or 
            {
              SymbolBoolOp RESULT =null;
		RESULT = new SymbolBoolOp(Operacions.OR,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aritOp ::= add 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.ADD,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // aritOp ::= sub 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.SUB,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aritOp ::= mul 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.MUL,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // aritOp ::= div 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.DIV,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // aritOp ::= mod 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.MOD,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // realOp ::= neg 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.NEG,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // realOp ::= eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.EQ,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // realOp ::= bg 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.BG,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // realOp ::= sm 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.SM,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // realOp ::= bg_eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.BGEQ,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // realOp ::= sm_eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.SMEQ,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // subProgramCall ::= id lparen rparen 
            {
              SymbolSubProgramCall RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new SymbolSubProgramCall(iden.toString(),codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // subProgramCall ::= subProgramContCall rparen 
            {
              SymbolSubProgramCall RESULT =null;
		int subprogcontcallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int subprogcontcallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSubProgramContCall subprogcontcall = (SymbolSubProgramContCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolSubProgramCall(subprogcontcall,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // subProgramContCall ::= id lparen exprSimple 
            {
              SymbolSubProgramContCall RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolSubProgramContCall(iden.toString(), expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // subProgramContCall ::= subProgramContCall com exprSimple 
            {
              SymbolSubProgramContCall RESULT =null;
		int subprogcontcallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int subprogcontcallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolSubProgramContCall subprogcontcall = (SymbolSubProgramContCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolSubProgramContCall(subprogcontcall, expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SwitchCase ::= r_switch lparen exprSimple rparen brop LCases Default brcl 
            {
              SymbolSwitchCase RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lcasesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lcasesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolLCases lcases = (SymbolLCases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new SymbolSwitchCase(expr,lcases,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LCases ::= Case LCases 
            {
              SymbolLCases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCase c = (SymbolCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lcasesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcasesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLCases lcases = (SymbolLCases)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolLCases(c,lcases,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LCases ::= 
            {
              SymbolLCases RESULT =null;
		RESULT = new SymbolLCases(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Case ::= r_case exprSimple twodots statementList 
            {
              SymbolCase RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolCase(expr,state,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Default ::= r_default twodots statementList 
            {
              SymbolDefault RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDefault(state,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Default ::= 
            {
              SymbolDefault RESULT =null;
		RESULT = new SymbolDefault(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // forIteration ::= r_for lparen forInit smcol exprSimple smcol forPostExpression rparen brop statementList brcl 
            {
              SymbolForIteration RESULT =null;
		int forinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int forinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolForInit forinit = (SymbolForInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int forpostleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int forpostright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolForPostExpression forpost = (SymbolForPostExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN)){
                                                               RESULT = new SymbolForIteration(forinit,expr,forpost,state,codi);
                                                         }else{
                                                              RESULT = new SymbolForIteration();
                                                              System.out.print("   Aixó NO ES CORRECTE AL FOR");
                                                         }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forIteration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // forInit ::= varDecl 
            {
              SymbolForInit RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarDecl vardecl = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolForInit(vardecl,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // forInit ::= 
            {
              SymbolForInit RESULT =null;
		RESULT = new SymbolForInit(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // forPostExpression ::= exprSimple 
            {
              SymbolForPostExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolForPostExpression(expr,codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // forPostExpression ::= 
            {
              SymbolForPostExpression RESULT =null;
		RESULT = new SymbolForPostExpression(codi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // whileStatement ::= r_while lparen exprSimple rparen brop statementList brcl 
            {
              SymbolWhileStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN)){
                                                        RESULT = new SymbolWhileStatement(expr,state,codi);
                                                     }else{
                                                          RESULT = new SymbolWhileStatement();
                                                           System.out.print("   Aixó NO ES CORRECTE AL WHILE");
                                                    }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ifStatement ::= r_if lparen exprSimple rparen brop statementList brcl 
            {
              SymbolIfStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN)){
                                             RESULT = new SymbolIfStatement(expr,states,codi);
                                           }else{
                                              RESULT = new SymbolIfStatement(codi);
                                            System.out.print("   Aixó NO ES CORRECTE AL WHILE");
                                           }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ifStatement ::= r_if lparen exprSimple rparen brop statementList brcl r_else brop statementList brcl 
            {
              SymbolIfStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int statelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int statelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolStatementList statel = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN)){
                                                                      RESULT = new SymbolIfStatement(expr,states,codi);
                                                                  }else{
                                                                       RESULT = new SymbolIfStatement(codi);
                                                                      System.out.print("   Aixó NO ES CORRECTE AL IF");
                                                                 }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // M ::= 
            {
              Object RESULT =null;
		ts.afegeixNivell();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
