
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import compiler.Symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

//  /** Constructor which sets the default scanner. */
//  @Deprecated
//  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\006\004\000\002\006\004\000\002" +
    "\006\002\000\002\032\006\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\007\012\000\002\034\005" +
    "\000\002\010\004\000\002\010\004\000\002\011\010\000" +
    "\002\012\004\000\002\012\004\000\002\033\006\000\002" +
    "\033\007\000\002\013\003\000\002\013\002\000\002\015" +
    "\004\000\002\015\002\000\002\016\004\000\002\016\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\004\000" +
    "\002\016\004\000\002\016\003\000\002\016\003\000\002" +
    "\016\004\000\002\047\005\000\002\050\006\000\002\051" +
    "\003\000\002\051\005\000\002\052\003\000\002\052\003" +
    "\000\002\026\006\000\002\026\004\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\004\000\002\037\003\000\002\031\006\000\002\036" +
    "\004\000\002\036\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\040\003\000\002\040\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\027\005\000\002\027\004\000" +
    "\002\030\005\000\002\030\005\000\002\043\012\000\002" +
    "\044\004\000\002\044\002\000\002\045\006\000\002\046" +
    "\005\000\002\046\002\000\002\020\015\000\002\021\003" +
    "\000\002\021\002\000\002\022\003\000\002\022\002\000" +
    "\002\017\011\000\002\023\010\000\002\025\006\000\002" +
    "\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\020\043\ufffe\044\ufffe\050\ufffe\054\ufffe\055" +
    "\ufffe\056\ufffe\057\ufffe\001\002\000\020\043\015\044\012" +
    "\050\013\054\021\055\022\056\010\057\016\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\006" +
    "\024\275\026\207\001\002\000\004\033\270\001\002\000" +
    "\020\043\ufffb\044\ufffb\050\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\001\002\000\004\004\257\001\002\000\010\054" +
    "\021\055\022\057\016\001\002\000\020\043\ufffc\044\ufffc" +
    "\050\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\001\002\000" +
    "\010\054\021\055\022\057\016\001\002\000\006\004\ufff1" +
    "\031\ufff1\001\002\000\004\004\023\001\002\000\020\043" +
    "\uffff\044\uffff\050\uffff\054\uffff\055\uffff\056\uffff\057\uffff" +
    "\001\002\000\006\004\ufff3\031\ufff3\001\002\000\006\004" +
    "\ufff2\031\ufff2\001\002\000\010\023\024\024\ufff5\026\ufff5" +
    "\001\002\000\022\004\026\005\027\007\032\033\041\053" +
    "\035\054\021\055\022\057\016\001\002\000\006\024\ufff9" +
    "\026\ufff9\001\002\000\054\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\031\100\032" +
    "\uffd2\033\101\034\uffd2\051\uffd2\052\uffd2\001\002\000\050" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\032\uffcf\034\uffcf\051\uffcf\052\uffcf\001" +
    "\002\000\014\024\ufff7\025\ufff7\026\ufff7\032\ufff7\034\ufff7" +
    "\001\002\000\050\010\047\011\061\012\051\013\060\014" +
    "\065\015\045\016\057\017\052\020\062\021\056\022\064" +
    "\023\024\024\ufff5\025\ufff5\026\ufff5\032\ufff5\034\ufff5\051" +
    "\054\052\063\001\002\000\050\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\032\uffd0" +
    "\034\uffd0\051\uffd0\052\uffd0\001\002\000\050\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\032\uffcd\034\uffcd\051\uffcd\052\uffcd\001\002\000\006" +
    "\026\074\034\075\001\002\000\004\005\073\001\002\000" +
    "\050\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\032\uffd1\034\uffd1\051\uffd1\052\uffd1" +
    "\001\002\000\004\031\070\001\002\000\014\024\ufff6\025" +
    "\ufff6\026\ufff6\032\ufff6\034\ufff6\001\002\000\014\004\026" +
    "\005\027\007\032\033\041\053\035\001\002\000\004\034" +
    "\043\001\002\000\050\010\047\011\061\012\051\013\060" +
    "\014\065\015\045\016\057\017\052\020\062\021\056\022" +
    "\064\023\024\024\ufff5\025\ufff5\026\ufff5\032\ufff5\034\ufff5" +
    "\051\054\052\063\001\002\000\014\004\uffc7\005\uffc7\007" +
    "\uffc7\033\uffc7\053\uffc7\001\002\000\014\004\uffbf\005\uffbf" +
    "\007\uffbf\033\uffbf\053\uffbf\001\002\000\014\024\uffca\025" +
    "\uffca\026\uffca\032\uffca\034\uffca\001\002\000\014\004\uffbd" +
    "\005\uffbd\007\uffbd\033\uffbd\053\uffbd\001\002\000\014\004" +
    "\uffc9\005\uffc9\007\uffc9\033\uffc9\053\uffc9\001\002\000\014" +
    "\004\uffbb\005\uffbb\007\uffbb\033\uffbb\053\uffbb\001\002\000" +
    "\014\004\uffc3\005\uffc3\007\uffc3\033\uffc3\053\uffc3\001\002" +
    "\000\014\004\026\005\027\007\032\033\041\053\035\001" +
    "\002\000\014\004\uffc6\005\uffc6\007\uffc6\033\uffc6\053\uffc6" +
    "\001\002\000\014\004\uffc8\005\uffc8\007\uffc8\033\uffc8\053" +
    "\uffc8\001\002\000\014\004\uffc1\005\uffc1\007\uffc1\033\uffc1" +
    "\053\uffc1\001\002\000\014\004\uffc4\005\uffc4\007\uffc4\033" +
    "\uffc4\053\uffc4\001\002\000\014\004\uffba\005\uffba\007\uffba" +
    "\033\uffba\053\uffba\001\002\000\014\004\uffbc\005\uffbc\007" +
    "\uffbc\033\uffbc\053\uffbc\001\002\000\014\004\uffc2\005\uffc2" +
    "\007\uffc2\033\uffc2\053\uffc2\001\002\000\014\004\uffc5\005" +
    "\uffc5\007\uffc5\033\uffc5\053\uffc5\001\002\000\014\004\uffc0" +
    "\005\uffc0\007\uffc0\033\uffc0\053\uffc0\001\002\000\014\004" +
    "\uffbe\005\uffbe\007\uffbe\033\uffbe\053\uffbe\001\002\000\014" +
    "\024\uffd4\025\uffd4\026\uffd4\032\uffd4\034\uffd4\001\002\000" +
    "\014\024\uffcb\025\uffcb\026\uffcb\032\uffcb\034\uffcb\001\002" +
    "\000\004\007\071\001\002\000\004\032\072\001\002\000" +
    "\014\024\ufff4\025\ufff4\026\ufff4\032\ufff4\034\ufff4\001\002" +
    "\000\050\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\032\uffce\034\uffce\051\uffce\052" +
    "\uffce\001\002\000\014\004\026\005\027\007\032\033\041" +
    "\053\035\001\002\000\050\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\032\uffb8\034" +
    "\uffb8\051\uffb8\052\uffb8\001\002\000\006\026\uffb6\034\uffb6" +
    "\001\002\000\014\024\uffd3\025\uffd3\026\uffd3\032\uffd3\034" +
    "\uffd3\001\002\000\014\004\026\005\027\007\032\033\041" +
    "\053\035\001\002\000\016\004\026\005\027\007\032\033" +
    "\041\034\103\053\035\001\002\000\006\026\uffb7\034\uffb7" +
    "\001\002\000\050\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\032\uffb9\034\uffb9\051" +
    "\uffb9\052\uffb9\001\002\000\004\032\105\001\002\000\050" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\032\uffcc\034\uffcc\051\uffcc\052\uffcc\001" +
    "\002\000\004\004\107\001\002\000\004\033\112\001\002" +
    "\000\004\027\125\001\002\000\006\026\120\034\121\001" +
    "\002\000\014\034\114\050\115\054\uffe6\055\uffe6\057\uffe6" +
    "\001\002\000\010\054\021\055\022\057\016\001\002\000" +
    "\004\027\uffed\001\002\000\010\054\uffe7\055\uffe7\057\uffe7" +
    "\001\002\000\004\004\117\001\002\000\006\026\uffe9\034" +
    "\uffe9\001\002\000\012\050\115\054\uffe6\055\uffe6\057\uffe6" +
    "\001\002\000\004\027\uffee\001\002\000\010\054\021\055" +
    "\022\057\016\001\002\000\004\004\124\001\002\000\006" +
    "\026\uffe8\034\uffe8\001\002\000\044\004\026\005\027\007" +
    "\032\033\041\035\127\037\141\042\145\045\uffe4\046\134" +
    "\047\132\050\013\053\035\054\021\055\022\057\016\060" +
    "\131\061\146\001\002\000\052\004\uffe0\005\uffe0\007\uffe0" +
    "\030\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\057\uffe0\060\uffe0\061\uffe0\001\002\000\004\033" +
    "\241\001\002\000\052\004\026\005\027\007\032\030\uffe4" +
    "\033\041\035\127\037\141\040\uffe4\041\uffe4\042\145\045" +
    "\uffe4\046\134\047\132\050\013\053\035\054\021\055\022" +
    "\057\016\060\131\061\146\001\002\000\004\033\236\001" +
    "\002\000\004\033\222\001\002\000\004\024\221\001\002" +
    "\000\004\033\213\001\002\000\006\024\210\026\207\001" +
    "\002\000\004\024\206\001\002\000\052\004\uffdc\005\uffdc" +
    "\007\uffdc\030\uffdc\033\uffdc\035\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002\000" +
    "\004\045\202\001\002\000\004\033\161\001\002\000\052" +
    "\004\uffe1\005\uffe1\007\uffe1\030\uffe1\033\uffe1\035\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\001\002\000\052\004\uffdd\005\uffdd\007\uffdd\030\uffdd" +
    "\033\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\057\uffdd\060\uffdd\061\uffdd\001\002\000\004\024\160\001" +
    "\002\000\004\024\157\001\002\000\004\033\147\001\002" +
    "\000\014\004\026\005\027\006\151\007\032\053\035\001" +
    "\002\000\006\016\uffd5\034\uffd5\001\002\000\006\016\uffd6" +
    "\034\uffd6\001\002\000\006\016\uffd8\034\uffd8\001\002\000" +
    "\006\016\155\034\154\001\002\000\004\024\uffd9\001\002" +
    "\000\014\004\026\005\027\006\151\007\032\053\035\001" +
    "\002\000\006\016\uffd7\034\uffd7\001\002\000\052\004\uffdb" +
    "\005\uffdb\007\uffdb\030\uffdb\033\uffdb\035\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\057\uffdb\060\uffdb\061\uffdb\001" +
    "\002\000\052\004\uffe2\005\uffe2\007\uffe2\030\uffe2\033\uffe2" +
    "\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\001\002\000\014\004\026\005\027\007" +
    "\032\033\041\053\035\001\002\000\004\034\163\001\002" +
    "\000\004\027\164\001\002\000\010\030\uffb3\040\165\041" +
    "\uffb3\001\002\000\014\004\026\005\027\007\032\033\041" +
    "\053\035\001\002\000\010\030\uffb3\040\165\041\uffb3\001" +
    "\002\000\006\030\uffb0\041\171\001\002\000\004\030\174" +
    "\001\002\000\004\025\172\001\002\000\044\004\026\005" +
    "\027\007\032\030\uffe4\033\041\035\127\037\141\042\145" +
    "\046\134\047\132\050\013\053\035\054\021\055\022\057" +
    "\016\060\131\061\146\001\002\000\004\030\uffb1\001\002" +
    "\000\052\004\uffb5\005\uffb5\007\uffb5\030\uffb5\033\uffb5\035" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\050\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\001\002\000\006\030\uffb4\041\uffb4\001\002" +
    "\000\004\025\177\001\002\000\050\004\026\005\027\007" +
    "\032\030\uffe4\033\041\035\127\037\141\040\uffe4\041\uffe4" +
    "\042\145\046\134\047\132\050\013\053\035\054\021\055" +
    "\022\057\016\060\131\061\146\001\002\000\010\030\uffb2" +
    "\040\uffb2\041\uffb2\001\002\000\004\030\205\001\002\000" +
    "\014\004\026\005\027\007\032\033\041\053\035\001\002" +
    "\000\004\024\204\001\002\000\004\030\uffef\001\002\000" +
    "\020\043\ufff0\044\ufff0\050\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\001\002\000\052\004\uffdf\005\uffdf\007\uffdf\030" +
    "\uffdf\033\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\001\002\000\004\004\211" +
    "\001\002\000\052\004\uffe3\005\uffe3\007\uffe3\030\uffe3\033" +
    "\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\053\uffe3\054\uffe3\055\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\001\002\000\010\023\024\024\ufff5" +
    "\026\ufff5\001\002\000\006\024\ufff8\026\ufff8\001\002\000" +
    "\014\004\026\005\027\007\032\033\041\053\035\001\002" +
    "\000\004\034\215\001\002\000\004\027\216\001\002\000" +
    "\044\004\026\005\027\007\032\030\uffe4\033\041\035\127" +
    "\037\141\042\145\046\134\047\132\050\013\053\035\054" +
    "\021\055\022\057\016\060\131\061\146\001\002\000\004" +
    "\030\220\001\002\000\052\004\uffaa\005\uffaa\007\uffaa\030" +
    "\uffaa\033\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\001\002\000\052\004\uffde" +
    "\005\uffde\007\uffde\030\uffde\033\uffde\035\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\053\uffde\054\uffde\055\uffde\057\uffde\060\uffde\061\uffde\001" +
    "\002\000\014\024\uffad\050\013\054\021\055\022\057\016" +
    "\001\002\000\004\024\225\001\002\000\006\024\uffae\026" +
    "\207\001\002\000\014\004\026\005\027\007\032\033\041" +
    "\053\035\001\002\000\004\024\227\001\002\000\016\004" +
    "\026\005\027\007\032\033\041\034\uffab\053\035\001\002" +
    "\000\004\034\232\001\002\000\004\034\uffac\001\002\000" +
    "\004\027\233\001\002\000\044\004\026\005\027\007\032" +
    "\030\uffe4\033\041\035\127\037\141\042\145\046\134\047" +
    "\132\050\013\053\035\054\021\055\022\057\016\060\131" +
    "\061\146\001\002\000\004\030\235\001\002\000\052\004" +
    "\uffaf\005\uffaf\007\uffaf\030\uffaf\033\uffaf\035\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\001\002\000\004\034\237\001\002\000\004\024\uffda\001" +
    "\002\000\012\030\uffe5\040\uffe5\041\uffe5\045\uffe5\001\002" +
    "\000\014\004\026\005\027\007\032\033\041\053\035\001" +
    "\002\000\004\034\243\001\002\000\004\027\246\001\002" +
    "\000\004\030\253\001\002\000\004\036\250\001\002\000" +
    "\044\004\026\005\027\007\032\030\uffe4\033\041\035\127" +
    "\037\141\042\145\046\134\047\132\050\013\053\035\054" +
    "\021\055\022\057\016\060\131\061\146\001\002\000\004" +
    "\030\uffa7\001\002\000\004\027\251\001\002\000\044\004" +
    "\026\005\027\007\032\030\uffe4\033\041\035\127\037\141" +
    "\042\145\046\134\047\132\050\013\053\035\054\021\055" +
    "\022\057\016\060\131\061\146\001\002\000\004\030\uffa8" +
    "\001\002\000\052\004\uffa9\005\uffa9\007\uffa9\030\uffa9\033" +
    "\uffa9\035\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\053\uffa9\054\uffa9\055\uffa9\057" +
    "\uffa9\060\uffa9\061\uffa9\001\002\000\004\004\255\001\002" +
    "\000\010\023\024\024\ufff5\026\ufff5\001\002\000\006\024" +
    "\ufffa\026\ufffa\001\002\000\004\033\262\001\002\000\004" +
    "\027\265\001\002\000\006\026\120\034\264\001\002\000" +
    "\014\034\263\050\115\054\uffe6\055\uffe6\057\uffe6\001\002" +
    "\000\004\027\uffea\001\002\000\004\027\uffeb\001\002\000" +
    "\044\004\026\005\027\007\032\030\uffe4\033\041\035\127" +
    "\037\141\042\145\046\134\047\132\050\013\053\035\054" +
    "\021\055\022\057\016\060\131\061\146\001\002\000\004" +
    "\030\267\001\002\000\020\043\uffec\044\uffec\050\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\001\002\000\004\034\271" +
    "\001\002\000\004\027\272\001\002\000\044\004\026\005" +
    "\027\007\032\030\uffe4\033\041\035\127\037\141\042\145" +
    "\046\134\047\132\050\013\053\035\054\021\055\022\057" +
    "\016\060\131\061\146\001\002\000\004\030\274\001\002" +
    "\000\004\002\000\001\002\000\020\043\ufffd\044\ufffd\050" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\006\002\004\003\003\001\001\000\014\004" +
    "\017\005\006\007\013\011\010\014\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\253" +
    "\001\001\000\002\001\001\000\004\014\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\024\001\001\000" +
    "\020\014\036\026\027\027\032\030\033\031\035\032\037" +
    "\037\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\045\035\052" +
    "\036\076\040\047\041\054\042\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\026\041\027\032\030\033\031\035\037\030\001\001" +
    "\000\002\001\001\000\016\006\045\035\052\036\065\040" +
    "\047\041\054\042\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\026\066" +
    "\027\032\030\033\031\035\037\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\026\075" +
    "\027\032\030\033\031\035\037\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\026\103" +
    "\027\032\030\033\031\035\037\030\001\001\000\014\026" +
    "\101\027\032\030\033\031\035\037\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\107\033\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\112\001" +
    "\001\000\004\014\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\121\001\001\000\002\001\001\000\004\014\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\134\014" +
    "\016\015\137\016\127\017\125\020\141\023\142\026\143" +
    "\027\032\030\033\031\035\037\030\043\136\047\135\050" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\134\014\016\015\237\016\127\017\125\020\141\023" +
    "\142\026\143\027\032\030\033\031\035\037\030\043\136" +
    "\047\135\050\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\027\032\030\033\031\035\037\147\051\152\052\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\027\032" +
    "\030\033\031\035\037\147\052\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\026\161" +
    "\027\032\030\033\031\035\037\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\166\045\165\001\001" +
    "\000\014\026\175\027\032\030\033\031\035\037\030\001" +
    "\001\000\006\044\174\045\165\001\001\000\004\046\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\005" +
    "\134\014\016\015\172\016\127\017\125\020\141\023\142" +
    "\026\143\027\032\030\033\031\035\037\030\043\136\047" +
    "\135\050\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\134\014" +
    "\016\015\177\016\127\017\125\020\141\023\142\026\143" +
    "\027\032\030\033\031\035\037\030\043\136\047\135\050" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\202\027\032\030\033\031\035\037\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\211\001\001\000\002\001\001\000\014\026\213\027\032" +
    "\030\033\031\035\037\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\005\134\014\016\015\216\016\127" +
    "\017\125\020\141\023\142\026\143\027\032\030\033\031" +
    "\035\037\030\043\136\047\135\050\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\223\014\016\021\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\225\027\032\030\033\031\035\037" +
    "\030\001\001\000\002\001\001\000\016\022\227\026\230" +
    "\027\032\030\033\031\035\037\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\134" +
    "\014\016\015\233\016\127\017\125\020\141\023\142\026" +
    "\143\027\032\030\033\031\035\037\030\043\136\047\135" +
    "\050\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\241\027\032\030\033\031\035\037\030\001\001\000" +
    "\002\001\001\000\006\024\244\025\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\134\014\016\015" +
    "\246\016\127\017\125\020\141\023\142\026\143\027\032" +
    "\030\033\031\035\037\030\043\136\047\135\050\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\134" +
    "\014\016\015\251\016\127\017\125\020\141\023\142\026" +
    "\143\027\032\030\033\031\035\037\030\043\136\047\135" +
    "\050\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\255\001\001\000\002\001\001" +
    "\000\006\012\257\033\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\134\014\016\015\265\016" +
    "\127\017\125\020\141\023\142\026\143\027\032\030\033" +
    "\031\035\037\030\043\136\047\135\050\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\134\014\016\015\272\016\127\017" +
    "\125\020\141\023\142\026\143\027\032\030\033\031\035" +
    "\037\030\043\136\047\135\050\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Scanner scanner;

    public Parser(Scanner scanner){
        this.scanner = scanner;
    }

    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
     * Variable utilitzada per emmagatzemar el darrer valor calculat.
     * Val 0 inicialment
     **/
    private double ans = 0;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolProgram start_val = (SymbolProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList r_main lparen rparen brop statementList brcl 
            {
              SymbolProgram RESULT =null;
		RESULT = new SymbolProgram();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              SymbolDeclList RESULT =null;
		RESULT=new SymbolDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              SymbolDeclList RESULT =null;
		RESULT=new SymbolDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl smcol 
            {
              SymbolDecl RESULT =null;
		RESULT = new SymbolDecl();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= funcDecl 
            {
              SymbolDecl RESULT =null;
		RESULT = new SymbolDecl();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= procDecl 
            {
              SymbolDecl RESULT =null;
		RESULT = new SymbolDecl();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDecl ::= r_const type id varInit 
            {
              SymbolVarDecl RESULT =null;
		RESULT=new SymbolVarDecl();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type id varInit 
            {
              SymbolVarDecl RESULT =null;
		RESULT=new SymbolVarDecl();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDecl ::= varDecl com id varInit 
            {
              SymbolVarDecl RESULT =null;
		RESULT=new SymbolVarDecl();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varInit ::= asig exprSimple 
            {
              SymbolVarInit RESULT =null;
		RESULT =new SymbolVarInit();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varInit ::= asig arrayInit 
            {
              SymbolVarInit RESULT =null;
		RESULT =new SymbolVarInit();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varInit ::= 
            {
              SymbolVarInit RESULT =null;
		RESULT = new SymbolVarInit();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arrayInit ::= type lop integer lclose 
            {
              SymbolArrayInit RESULT =null;
		RESULT =new  SymbolArrayInit();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInit",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= r_int 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= r_bool 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= r_string 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDecl ::= r_function type id funcCap brop statementList return brcl 
            {
              SymbolFuncDecl RESULT =null;
		RESULT=new SymbolFuncDecl();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // return ::= r_return exprSimple smcol 
            {
              SymbolReturn RESULT =null;
		RESULT = new SymbolReturn();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcCap ::= ContCap rparen 
            {
              SymbolFuncCap RESULT =null;
		RESULT=new SymbolFuncCap();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcCap ::= lparen rparen 
            {
              SymbolFuncCap RESULT =null;
		RESULT=new SymbolFuncCap();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procDecl ::= r_procedure id procCap brop statementList brcl 
            {
              SymbolProcDecl RESULT =null;
		RESULT =new SymbolProcDecl();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procCap ::= ContCap rparen 
            {
              SymbolProcCap RESULT =null;
		RESULT = new SymbolProcCap();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCap",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procCap ::= lparen rparen 
            {
              SymbolProcCap RESULT =null;
		RESULT = new SymbolProcCap();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCap",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ContCap ::= lparen argType type id 
            {
              SymbolContCap RESULT =null;
		RESULT = new SymbolContCap();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContCap",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ContCap ::= ContCap com argType type id 
            {
              SymbolContCap RESULT =null;
		RESULT = new SymbolContCap();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContCap",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argType ::= r_const 
            {
              SymbolArgType RESULT =null;
		RESULT = new SymbolArgType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argType ::= 
            {
              SymbolArgType RESULT =null;
		RESULT = new SymbolArgType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statementList ::= statement statementList 
            {
              SymbolStatementList RESULT =null;
		RESULT= new SymbolStatementList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statementList ::= 
            {
              SymbolStatementList RESULT =null;
		RESULT=new SymbolStatementList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= varDecl smcol 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= exprSimple smcol 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= forIteration 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= whileStatement 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= inputStatement smcol 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= printStatement smcol 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= ifStatement 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= SwitchCase 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= r_break smcol 
            {
              SymbolStatement RESULT =null;
		RESULT=new SymbolStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inputStatement ::= r_input lparen rparen 
            {
              SymbolInputStatement RESULT =null;
		RESULT = new SymbolInputStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputStatement",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // printStatement ::= r_print lparen stringValue rparen 
            {
              SymbolPrintStatement RESULT =null;
		RESULT = new SymbolPrintStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStatement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stringValue ::= literal 
            {
              SymbolStringValue RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringValue",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stringValue ::= stringValue add literal 
            {
              SymbolStringValue RESULT =null;
		RESULT = new SymbolStringValue();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringValue",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literal ::= string 
            {
              SymbolLiteral RESULT =null;
		RESULT = new SymbolLiteral();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literal ::= valor 
            {
              SymbolLiteral RESULT =null;
		RESULT = new SymbolLiteral();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprSimple ::= lparen exprSimple rparen operacio 
            {
              SymbolExpressioSimple RESULT =null;
		RESULT=new SymbolExpressioSimple();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprSimple ::= valor operacio 
            {
              SymbolExpressioSimple RESULT =null;
		RESULT=new SymbolExpressioSimple();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= id 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor("soy un id en valor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor ::= array 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor("soy un array en valor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor ::= integer 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor("soy un integer en valor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valor ::= bool 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor("soy un bool en valor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor ::= r_not bool 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor("soy un r_not bool en valor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor ::= subProgramCall 
            {
              SymbolValor RESULT =null;
		RESULT=new SymbolValor("soy un subProgramCall en valor");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // array ::= id lop exprSimple lclose 
            {
              SymbolArray RESULT =null;
		RESULT=new SymbolArray();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacio ::= op exprSimple 
            {
              SymbolOper RESULT =null;
		RESULT = new SymbolOper();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacio ::= varInit 
            {
              SymbolOper RESULT =null;
		RESULT = new SymbolOper();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op ::= boolOp 
            {
              SymbolOperador RESULT =null;
		RESULT = new SymbolOperador();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op ::= aritOp 
            {
              SymbolOperador RESULT =null;
		RESULT = new SymbolOperador();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op ::= realOp 
            {
              SymbolOperador RESULT =null;
		RESULT = new SymbolOperador();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // boolOp ::= r_and 
            {
              SymbolBoolOp RESULT =null;
		RESULT = new SymbolBoolOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // boolOp ::= r_or 
            {
              SymbolBoolOp RESULT =null;
		RESULT = new SymbolBoolOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // aritOp ::= add 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aritOp ::= sub 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // aritOp ::= mul 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // aritOp ::= div 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // aritOp ::= mod 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // realOp ::= neg 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // realOp ::= eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // realOp ::= bg 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // realOp ::= sm 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // realOp ::= bg_eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // realOp ::= sm_eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // subProgramCall ::= id lparen rparen 
            {
              SymbolSubProgramCall RESULT =null;
		RESULT = new SymbolSubProgramCall();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // subProgramCall ::= subProgramContCall rparen 
            {
              SymbolSubProgramCall RESULT =null;
		RESULT = new SymbolSubProgramCall();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // subProgramContCall ::= id lparen exprSimple 
            {
              SymbolSubProgramContCall RESULT =null;
		RESULT = new SymbolSubProgramContCall();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // subProgramContCall ::= subProgramContCall com exprSimple 
            {
              SymbolSubProgramContCall RESULT =null;
		RESULT = new SymbolSubProgramContCall();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SwitchCase ::= r_switch lparen exprSimple rparen brop LCases Default brcl 
            {
              SymbolSwitchCase RESULT =null;
		RESULT = new SymbolSwitchCase();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LCases ::= Case LCases 
            {
              SymbolLCases RESULT =null;
		RESULT = new SymbolLCases();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LCases ::= 
            {
              SymbolLCases RESULT =null;
		RESULT = new SymbolLCases();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Case ::= r_case exprSimple twodots statementList 
            {
              SymbolCase RESULT =null;
		RESULT = new SymbolCase();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Default ::= r_default twodots statementList 
            {
              SymbolDefault RESULT =null;
		RESULT = new SymbolDefault();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Default ::= 
            {
              SymbolDefault RESULT =null;
		RESULT = new SymbolDefault();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // forIteration ::= r_for lparen forInit smcol exprSimple smcol forPostExpression rparen brop statementList brcl 
            {
              SymbolForStatement RESULT =null;
		RESULT = new SymbolForStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forIteration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // forInit ::= varDecl 
            {
              SymbolForInit RESULT =null;
		RESULT = new SymbolForInit();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // forInit ::= 
            {
              SymbolForInit RESULT =null;
		RESULT = new SymbolForInit();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // forPostExpression ::= exprSimple 
            {
              SymbolForPostExpression RESULT =null;
		RESULT = new SymbolForPostExpression();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // forPostExpression ::= 
            {
              SymbolForPostExpression RESULT =null;
		RESULT = new SymbolForPostExpression();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // whileStatement ::= r_while lparen exprSimple rparen brop statementList brcl 
            {
              SymbolWhileStatement RESULT =null;
		RESULT = new SymbolWhileStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ifStatement ::= r_if lparen exprSimple rparen elseStatement brcl 
            {
              SymbolIfStatement RESULT =null;
		RESULT = new SymbolIfStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // elseStatement ::= elseIfStatement r_else brop statementList 
            {
              SymbolElseStatement RESULT =null;
		RESULT = new SymbolElseStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // elseStatement ::= brop statementList 
            {
              SymbolElseStatement RESULT =null;
		RESULT = new SymbolElseStatement();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
