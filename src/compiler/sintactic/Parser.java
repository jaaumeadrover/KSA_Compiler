
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import compiler.Symbols.TaulaSimbols.*;
import compiler.ArbreSintactic.*;
import compiler.GeneracioCodiIntermedi.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import compiler.Semantic.Semantic;
import java.util.ArrayList;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\003\011\000\002\004" +
    "\004\000\002\004\002\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\006\006\000\002\006\005\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\027\006\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\031\005\000\002\010\013\000\002\011\004" +
    "\000\002\011\004\000\002\012\011\000\002\030\006\000" +
    "\002\030\007\000\002\047\003\000\002\047\002\000\002" +
    "\014\004\000\002\014\002\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\015\003\000\002\044\005\000" +
    "\002\045\006\000\002\046\003\000\002\046\003\000\002" +
    "\023\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\006\000\002\034\003" +
    "\000\002\034\005\000\002\034\003\000\002\034\003\000" +
    "\002\026\006\000\002\033\004\000\002\033\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\024" +
    "\005\000\002\024\006\000\002\025\003\000\002\025\005" +
    "\000\002\040\012\000\002\041\004\000\002\041\002\000" +
    "\002\042\006\000\002\043\005\000\002\043\002\000\002" +
    "\017\015\000\002\020\003\000\002\020\002\000\002\021" +
    "\003\000\002\021\002\000\002\016\011\000\002\022\011" +
    "\000\002\022\015\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\020\042\ufffe\043\ufffe\047\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\001\002\000\020\042\015\043\013" +
    "\047\012\053\021\054\022\055\010\056\016\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\004" +
    "\024\263\001\002\000\004\033\256\001\002\000\020\042" +
    "\ufffb\043\ufffb\047\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\001\002\000\010\053\021\054\022\056\016\001\002\000" +
    "\004\004\uffac\001\002\000\020\042\ufffc\043\ufffc\047\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000\010\053" +
    "\uffac\054\uffac\056\uffac\001\002\000\010\004\ufff2\031\ufff2" +
    "\061\ufff2\001\002\000\004\004\023\001\002\000\020\042" +
    "\uffff\043\uffff\047\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\001\002\000\010\004\ufff4\031\ufff4\061\ufff4\001\002\000" +
    "\010\004\ufff3\031\ufff3\061\ufff3\001\002\000\006\023\024" +
    "\024\ufff6\001\002\000\026\004\026\005\027\006\037\007" +
    "\034\033\043\052\035\053\021\054\022\056\016\057\041" +
    "\001\002\000\004\024\ufff9\001\002\000\054\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\031\102\032\uffda\033\103\034\uffda\050\uffda\051\uffda" +
    "\001\002\000\050\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\032\uffd7\034\uffd7\050" +
    "\uffd7\051\uffd7\001\002\000\012\024\ufff8\025\ufff8\032\ufff8" +
    "\034\ufff8\001\002\000\050\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\032\uffd3\034" +
    "\uffd3\050\uffd3\051\uffd3\001\002\000\046\010\060\011\072" +
    "\012\062\013\071\014\077\015\073\016\070\017\063\020" +
    "\074\021\067\022\076\023\024\024\ufff6\025\ufff6\032\ufff6" +
    "\034\ufff6\050\065\051\075\001\002\000\050\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\032\uffd5\034\uffd5\050\uffd5\051\uffd5\001\002\000\050" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\032\uffd8\034\uffd8\050\uffd8\051\uffd8\001" +
    "\002\000\004\033\053\001\002\000\050\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\032\uffd9\034\uffd9\050\uffd9\051\uffd9\001\002\000\050\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\032\uffd2\034\uffd2\050\uffd2\051\uffd2\001\002" +
    "\000\004\031\050\001\002\000\004\033\046\001\002\000" +
    "\012\024\ufff7\025\ufff7\032\ufff7\034\ufff7\001\002\000\020" +
    "\004\026\005\027\006\037\007\034\033\043\052\035\057" +
    "\041\001\002\000\004\034\045\001\002\000\050\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\032\uffd4\034\uffd4\050\uffd4\051\uffd4\001\002\000" +
    "\004\034\047\001\002\000\050\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\032\uffdf" +
    "\034\uffdf\050\uffdf\051\uffdf\001\002\000\004\007\051\001" +
    "\002\000\004\032\052\001\002\000\012\024\ufff5\025\ufff5" +
    "\032\ufff5\034\ufff5\001\002\000\020\004\026\005\027\006" +
    "\037\007\034\033\043\052\035\057\041\001\002\000\004" +
    "\034\055\001\002\000\050\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\032\uffd6\034" +
    "\uffd6\050\uffd6\051\uffd6\001\002\000\020\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\033\uffcc\052\uffcc\057\uffcc\001\002\000" +
    "\012\024\uffcf\025\uffcf\032\uffcf\034\uffcf\001\002\000\020" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\033\uffc2\052\uffc2\057" +
    "\uffc2\001\002\000\020\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\033\uffce\052\uffce\057\uffce\001\002\000\020\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\033\uffc0\052\uffc0\057\uffc0\001\002" +
    "\000\020\004\uffc8\005\uffc8\006\uffc8\007\uffc8\033\uffc8\052" +
    "\uffc8\057\uffc8\001\002\000\020\004\026\005\027\006\037" +
    "\007\034\033\043\052\035\057\041\001\002\000\020\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\033\uffcb\052\uffcb\057\uffcb" +
    "\001\002\000\020\004\uffcd\005\uffcd\006\uffcd\007\uffcd\033" +
    "\uffcd\052\uffcd\057\uffcd\001\002\000\020\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\033\uffc6\052\uffc6\057\uffc6\001\002\000" +
    "\020\004\uffc9\005\uffc9\006\uffc9\007\uffc9\033\uffc9\052\uffc9" +
    "\057\uffc9\001\002\000\020\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\033\uffbf\052\uffbf\057\uffbf\001\002\000\020\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\033\uffc1\052\uffc1\057\uffc1\001" +
    "\002\000\020\004\uffc4\005\uffc4\006\uffc4\007\uffc4\033\uffc4" +
    "\052\uffc4\057\uffc4\001\002\000\020\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\033\uffc7\052\uffc7\057\uffc7\001\002\000\020" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\033\uffca\052\uffca\057" +
    "\uffca\001\002\000\020\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\033\uffc5\052\uffc5\057\uffc5\001\002\000\020\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\033\uffc3\052\uffc3\057\uffc3\001\002" +
    "\000\012\024\uffdb\025\uffdb\032\uffdb\034\uffdb\001\002\000" +
    "\012\024\uffd0\025\uffd0\032\uffd0\034\uffd0\001\002\000\020" +
    "\004\026\005\027\006\037\007\034\033\043\052\035\057" +
    "\041\001\002\000\022\004\026\005\027\006\037\007\034" +
    "\033\043\034\106\052\035\057\041\001\002\000\006\026" +
    "\uffbc\034\uffbc\001\002\000\006\026\107\034\110\001\002" +
    "\000\050\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\032\uffbe\034\uffbe\050\uffbe\051" +
    "\uffbe\001\002\000\020\004\026\005\027\006\037\007\034" +
    "\033\043\052\035\057\041\001\002\000\050\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\032\uffbd\034\uffbd\050\uffbd\051\uffbd\001\002\000\006" +
    "\026\uffbb\034\uffbb\001\002\000\004\032\113\001\002\000" +
    "\050\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\032\uffd1\034\uffd1\050\uffd1\051\uffd1" +
    "\001\002\000\010\053\021\054\022\056\016\001\002\000" +
    "\004\004\116\001\002\000\004\033\121\001\002\000\004" +
    "\027\134\001\002\000\006\026\127\034\130\001\002\000" +
    "\012\034\122\053\021\054\022\056\016\001\002\000\004" +
    "\027\uffee\001\002\000\006\004\uffe9\061\125\001\002\000" +
    "\004\004\126\001\002\000\004\004\uffea\001\002\000\006" +
    "\026\uffec\034\uffec\001\002\000\010\053\021\054\022\056" +
    "\016\001\002\000\004\027\uffef\001\002\000\006\004\uffe9" +
    "\061\125\001\002\000\004\004\133\001\002\000\006\026" +
    "\uffeb\034\uffeb\001\002\000\044\004\026\005\027\006\037" +
    "\007\034\033\043\035\136\037\146\044\uffe7\045\142\046" +
    "\140\047\012\052\035\053\021\054\022\056\016\057\041" +
    "\060\152\001\002\000\052\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\030\uffe3\033\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\001\002\000\004\033\233" +
    "\001\002\000\052\004\026\005\027\006\037\007\034\030" +
    "\uffe7\033\043\035\136\037\146\040\uffe7\041\uffe7\044\uffe7" +
    "\045\142\046\140\047\012\052\035\053\021\054\022\056" +
    "\016\057\041\060\152\001\002\000\004\033\216\001\002" +
    "\000\004\024\215\001\002\000\004\033\207\001\002\000" +
    "\004\024\206\001\002\000\052\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\030\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\056\uffe0\057\uffe0\060\uffe0\001\002\000\004\044" +
    "\202\001\002\000\004\033\161\001\002\000\052\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\030\uffe4\033\uffe4\035\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\056\uffe4\057\uffe4\060\uffe4\001" +
    "\002\000\052\004\uffe1\005\uffe1\006\uffe1\007\uffe1\030\uffe1" +
    "\033\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\052\uffe1\053\uffe1\054\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\001\002\000\004\024\160\001\002\000" +
    "\004\033\153\001\002\000\006\004\156\006\155\001\002" +
    "\000\004\034\157\001\002\000\004\034\uffdd\001\002\000" +
    "\004\034\uffdc\001\002\000\004\024\uffde\001\002\000\052" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\030\uffe5\033\uffe5\035" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\052\uffe5\053\uffe5\054\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\001\002\000\020\004\026\005\027\006\037\007\034" +
    "\033\043\052\035\057\041\001\002\000\004\034\163\001" +
    "\002\000\004\027\164\001\002\000\010\030\uffb8\040\165" +
    "\041\uffb8\001\002\000\020\004\026\005\027\006\037\007" +
    "\034\033\043\052\035\057\041\001\002\000\010\030\uffb8" +
    "\040\165\041\uffb8\001\002\000\006\030\uffb5\041\171\001" +
    "\002\000\004\030\174\001\002\000\004\025\172\001\002" +
    "\000\044\004\026\005\027\006\037\007\034\030\uffe7\033" +
    "\043\035\136\037\146\045\142\046\140\047\012\052\035" +
    "\053\021\054\022\056\016\057\041\060\152\001\002\000" +
    "\004\030\uffb6\001\002\000\052\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\030\uffba\033\uffba\035\uffba\037\uffba\040\uffba\041" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\052\uffba\053\uffba" +
    "\054\uffba\056\uffba\057\uffba\060\uffba\001\002\000\006\030" +
    "\uffb9\041\uffb9\001\002\000\004\025\177\001\002\000\050" +
    "\004\026\005\027\006\037\007\034\030\uffe7\033\043\035" +
    "\136\037\146\040\uffe7\041\uffe7\045\142\046\140\047\012" +
    "\052\035\053\021\054\022\056\016\057\041\060\152\001" +
    "\002\000\010\030\uffb7\040\uffb7\041\uffb7\001\002\000\004" +
    "\030\205\001\002\000\020\004\026\005\027\006\037\007" +
    "\034\033\043\052\035\057\041\001\002\000\004\024\204" +
    "\001\002\000\004\030\ufff1\001\002\000\020\042\ufff0\043" +
    "\ufff0\047\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002" +
    "\000\052\004\uffe6\005\uffe6\006\uffe6\007\uffe6\030\uffe6\033" +
    "\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\052\uffe6\053\uffe6\054\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\001\002\000\020\004\026\005\027\006\037" +
    "\007\034\033\043\052\035\057\041\001\002\000\004\034" +
    "\211\001\002\000\004\027\212\001\002\000\044\004\026" +
    "\005\027\006\037\007\034\030\uffe7\033\043\035\136\037" +
    "\146\045\142\046\140\047\012\052\035\053\021\054\022" +
    "\056\016\057\041\060\152\001\002\000\004\030\214\001" +
    "\002\000\052\004\uffaf\005\uffaf\006\uffaf\007\uffaf\030\uffaf" +
    "\033\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\052\uffaf\053\uffaf\054\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\001\002\000\052\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\030\uffe2\033\uffe2\035\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\056\uffe2\057\uffe2\060\uffe2\001\002\000\014" +
    "\024\uffb2\047\012\053\021\054\022\056\016\001\002\000" +
    "\004\024\221\001\002\000\004\024\uffb3\001\002\000\020" +
    "\004\026\005\027\006\037\007\034\033\043\052\035\057" +
    "\041\001\002\000\004\024\223\001\002\000\022\004\026" +
    "\005\027\006\037\007\034\033\043\034\uffb0\052\035\057" +
    "\041\001\002\000\004\034\226\001\002\000\004\034\uffb1" +
    "\001\002\000\004\027\227\001\002\000\044\004\026\005" +
    "\027\006\037\007\034\030\uffe7\033\043\035\136\037\146" +
    "\045\142\046\140\047\012\052\035\053\021\054\022\056" +
    "\016\057\041\060\152\001\002\000\004\030\231\001\002" +
    "\000\052\004\uffb4\005\uffb4\006\uffb4\007\uffb4\030\uffb4\033" +
    "\uffb4\035\uffb4\037\uffb4\040\uffb4\041\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\052\uffb4\053\uffb4\054\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\001\002\000\012\030\uffe8\040\uffe8\041\uffe8" +
    "\044\uffe8\001\002\000\020\004\026\005\027\006\037\007" +
    "\034\033\043\052\035\057\041\001\002\000\004\034\235" +
    "\001\002\000\004\027\236\001\002\000\044\004\026\005" +
    "\027\006\037\007\034\030\uffe7\033\043\035\136\037\146" +
    "\045\142\046\140\047\012\052\035\053\021\054\022\056" +
    "\016\057\041\060\152\001\002\000\004\030\240\001\002" +
    "\000\054\004\uffae\005\uffae\006\uffae\007\uffae\030\uffae\033" +
    "\uffae\035\uffae\036\241\037\uffae\040\uffae\041\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\052\uffae\053\uffae\054\uffae\056" +
    "\uffae\057\uffae\060\uffae\001\002\000\004\027\242\001\002" +
    "\000\044\004\026\005\027\006\037\007\034\030\uffe7\033" +
    "\043\035\136\037\146\045\142\046\140\047\012\052\035" +
    "\053\021\054\022\056\016\057\041\060\152\001\002\000" +
    "\004\030\244\001\002\000\052\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\030\uffad\033\uffad\035\uffad\037\uffad\040\uffad\041" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\052\uffad\053\uffad" +
    "\054\uffad\056\uffad\057\uffad\060\uffad\001\002\000\004\004" +
    "\246\001\002\000\004\033\121\001\002\000\004\027\250" +
    "\001\002\000\044\004\026\005\027\006\037\007\034\030" +
    "\uffe7\033\043\035\136\037\146\045\142\046\140\047\012" +
    "\052\035\053\021\054\022\056\016\057\041\060\152\001" +
    "\002\000\004\030\252\001\002\000\020\042\uffed\043\uffed" +
    "\047\uffed\053\uffed\054\uffed\055\uffed\056\uffed\001\002\000" +
    "\004\004\254\001\002\000\006\023\024\024\ufff6\001\002" +
    "\000\004\024\ufffa\001\002\000\004\034\257\001\002\000" +
    "\004\027\260\001\002\000\044\004\026\005\027\006\037" +
    "\007\034\030\uffe7\033\043\035\136\037\146\045\142\046" +
    "\140\047\012\052\035\053\021\054\022\056\016\057\041" +
    "\060\152\001\002\000\004\030\262\001\002\000\004\002" +
    "\000\001\002\000\020\042\ufffd\043\ufffd\047\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\006\003\004\004\003\001\001\000\014\005" +
    "\017\006\006\010\013\012\010\013\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\252\001\001\000\004" +
    "\002\244\001\001\000\002\001\001\000\004\002\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\024\001" +
    "\001\000\020\013\037\023\027\024\032\026\035\027\041" +
    "\034\031\044\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\056\032\063\033\077\035\060\036\065\037" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\043" +
    "\024\032\026\035\034\031\044\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\023\053\024\032\026\035\034\031\044\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\100\024\032\026" +
    "\035\034\031\044\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\111\024\032" +
    "\026\035\034\031\044\030\001\001\000\014\024\032\025" +
    "\104\026\035\034\103\044\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\032\026" +
    "\035\034\110\044\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\114\001\001\000\002\001\001\000\006\011\116\030\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\122\001\001\000\002\001\001\000\004\047\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\130\001\001\000\002\001\001\000\004\047\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\142\013\016\014\144\015\136\016\134\017\146\022\147" +
    "\023\150\024\032\026\035\034\031\040\143\044\030\045" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\142\013\016\014\231\015\136\016\134\017\146\022" +
    "\147\023\150\024\032\026\035\034\031\040\143\044\030" +
    "\045\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\023\161\024\032\026\035\034\031\044\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\166\042\165" +
    "\001\001\000\014\023\175\024\032\026\035\034\031\044" +
    "\030\001\001\000\006\041\174\042\165\001\001\000\004" +
    "\043\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\142\013\016\014\172\015\136\016\134\017\146" +
    "\022\147\023\150\024\032\026\035\034\031\040\143\044" +
    "\030\045\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\142\013" +
    "\016\014\177\015\136\016\134\017\146\022\147\023\150" +
    "\024\032\026\035\034\031\040\143\044\030\045\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\202" +
    "\024\032\026\035\034\031\044\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\207\024\032\026\035\034\031\044\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\142" +
    "\013\016\014\212\015\136\016\134\017\146\022\147\023" +
    "\150\024\032\026\035\034\031\040\143\044\030\045\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\217\013\016\020\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\221\024\032\026" +
    "\035\034\031\044\030\001\001\000\002\001\001\000\016" +
    "\021\223\023\224\024\032\026\035\034\031\044\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\142\013\016\014\227\015\136\016\134\017" +
    "\146\022\147\023\150\024\032\026\035\034\031\040\143" +
    "\044\030\045\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\233\024\032\026\035" +
    "\034\031\044\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\006\142\013\016\014\236\015\136\016\134" +
    "\017\146\022\147\023\150\024\032\026\035\034\031\040" +
    "\143\044\030\045\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\142\013\016\014" +
    "\242\015\136\016\134\017\146\022\147\023\150\024\032" +
    "\026\035\034\031\040\143\044\030\045\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\246\030\117\001\001\000\002\001\001\000\036\006" +
    "\142\013\016\014\250\015\136\016\134\017\146\022\147" +
    "\023\150\024\032\026\035\034\031\040\143\044\030\045" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\142\013\016" +
    "\014\260\015\136\016\134\017\146\022\147\023\150\024" +
    "\032\026\035\034\031\040\143\044\030\045\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private TaulaSimbols ts=new TaulaSimbols();
    private Scanner scanner;
    private Semantic comprovaTipus=new Semantic(ts);
    private ArbreSintactic arbre=new ArbreSintactic();
    ArrayList<String> errorsSintactic = new ArrayList<>();

    private ArrayList<SymbolValor> p = new ArrayList<SymbolValor>();
    //CodiTresAdreces codi3A;

    /*
    public Parser(Scanner scanner){
        this.scanner = scanner;
    }
    */
    public Semantic getComprovaTipus(){
        return comprovaTipus;
    }

    public ArbreSintactic getArbreSintac(){
        return arbre;
    }


    /**
     * Variable utilitzada per emmagatzemar el darrer valor calculat.
     * Val 0 inicialment
     **/
    private double ans = 0;

    /**
        Gestió d'errors
    **/

    // variable que ens indica si hi ha hagut un error semantic
    private boolean errorSemantic = false;

        @Override
        public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
            //report_error("Error sintàctic catastròfic",cur_token);
            //done_parsing();
        }

        @Override
        public void syntax_error(Symbol cur_token) {
            report_error("de sintàxis. Linea: " +(cur_token.left+1),cur_token);
        }

        @Override
        public void report_error(String message, Object info) {
            StringBuilder msg = new StringBuilder("ERROR");
            if (info instanceof Symbol) {
                ComplexSymbol token = (ComplexSymbol)info;
                Location l = token.getLeft();

                if (l != null) {
                    msg.append(" (fila: ")
                       .append(l.getLine())
                       .append(", columna: ")
                       .append(l.getColumn())
                       .append(")");
                }
            }
            msg.append(": ").append(message);
            errorsSintactic.add(msg.toString());


        }

        @Override
        public void report_fatal_error(String message, Object info) throws Exception {
            report_error(" sintàctic catastròfic. Linea: "+(cur_token.left+1),cur_token);
            done_parsing();
        }
        public ArrayList<String> geterrorsSintactic(){
            return errorsSintactic;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolProgram start_val = (SymbolProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList r_main lparen rparen brop statementList brcl 
            {
              SymbolProgram RESULT =null;
		int declistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolDeclList declist = (SymbolDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolProgram(declist,states);
                                                                                    arbre.setRoot(RESULT);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              SymbolDeclList RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDeclList declList = (SymbolDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecl decl = (SymbolDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolDeclList(decl,declList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              SymbolDeclList RESULT =null;
		RESULT=new SymbolDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl smcol 
            {
              SymbolDecl RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVarDecl var = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolDecl(var,null,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= funcDecl 
            {
              SymbolDecl RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFuncDecl func = (SymbolFuncDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDecl(null,func,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= procDecl 
            {
              SymbolDecl RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolProcDecl proc = (SymbolProcDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDecl(null,null,proc);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDecl ::= r_const type id varInit 
            {
              SymbolVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        //DECLARACIÓ CONSTANT
                                                        int error = ts.afegeixSimbol(iden.toString(), t.getTipusSub(), Tipus.CONST, 0, 0,true);

                                                        if(comprovaTipus.gestAsigDecl(iden.toString(),varinit,cur_token.left)){
                                                            if(error==1){
                                                                RESULT=new SymbolVarDecl(true, t.getTipusSub(), iden.toString(),varinit);
                                                                }else{
                                                                    RESULT=new SymbolVarDecl();
                                                                    comprovaTipus.addError("ERROR Semántic, la constant  "+iden.toString()+", ja existeix. Linea: "+(cur_token.left+1));
                                                                }
                                                        } else{
                                                            RESULT=new SymbolVarDecl();
                                                        }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type id varInit 
            {
              SymbolVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        if(varinit.isIsarray()){
                                                                int error = ts.afegeixSimbol(iden.toString(),t.getTipusSub(), Tipus.ARRAY,0,varinit.getArray().getInteger(),!varinit.esBuit());
                                                                if(comprovaTipus.gestAsigDecl(iden.toString(),varinit,cur_token.left)){
                                                                    if(error==1){
                                                                        RESULT=new SymbolVarDecl(false,t.getTipusSub(),iden.toString(),varinit);
                                                                  }else{
                                                                    comprovaTipus.addError("ERROR Semántic, la variable array "+iden.toString()+", ja existeix. Linea: "+(cur_token.left+1));
                                                                    RESULT=new SymbolVarDecl();
                                                                  }
                                                                  }else{
                                                                  RESULT=new SymbolVarDecl();
                                                                  }
                                                            }else{

                                                                int error = ts.afegeixSimbol(iden.toString(),t.getTipusSub(), Tipus.VAR,0,0,!varinit.esBuit());
                                                                if(comprovaTipus.gestAsigDecl(iden.toString(),varinit,cur_token.left)){
                                                                    if (error==1){
                                                                        RESULT=new SymbolVarDecl(false,t.getTipusSub(),iden.toString(),varinit);
                                                                    }else{
                                                                        comprovaTipus.addError("ERROR Semántic, la variable  "+iden.toString()+", ja existeix. Linea: "+(cur_token.left+1));
                                                                        RESULT=new SymbolVarDecl();
                                                                    }
                                                                } else{
                                                                    RESULT=new SymbolVarDecl();
                                                                }
                                                            }
                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varInit ::= asig exprSimple 
            {
              SymbolVarInit RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =new SymbolVarInit(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varInit ::= asig arrayInit 
            {
              SymbolVarInit RESULT =null;
		int arrayInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArrayInit arrayInit = (SymbolArrayInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =new SymbolVarInit(arrayInit);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varInit ::= 
            {
              SymbolVarInit RESULT =null;
		RESULT = new SymbolVarInit(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arrayInit ::= type lop integer lclose 
            {
              SymbolArrayInit RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =new  SymbolArrayInit(t.getTipusSub(),integer.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInit",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= r_int 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.INT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= r_bool 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.BOOLEAN);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= r_string 
            {
              SymbolType RESULT =null;
		RESULT=new SymbolType(TipusSub.STRING);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return ::= r_return exprSimple smcol 
            {
              SymbolReturn RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolReturn(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDecl ::= r_function M type id funcCap brop statementList return brcl 
            {
              SymbolFuncDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcCapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int funcCapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolFuncCap funcCap = (SymbolFuncCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rtnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolReturn rtn = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                                                                Simbol s=ts.consultaFunc(iden.toString());
                                                                                //No existeix la funció, es pot afegir
                                                                                if(s == null){
                                                                                    //comporvar si la funció retorna el mateix tipus
                                                                                    if(comprovaTipus.gestFunc(t.getTipusSub(),rtn)){

                                                                                        RESULT=new SymbolFuncDecl(t.getTipusSub(), iden.toString(), stats, rtn,funcCap);

                                                                                        ts.afegeixSimbol(iden.toString(), t.getTipusSub(), Tipus.FUNC, 0,0,true);
                                                                                    }else{
                                                                                        RESULT=new SymbolFuncDecl();
                                                                                    }
                                                                                }else{
                                                                                    comprovaTipus.addError("ERROR Semàntic, la funció "+iden.toString()+", ja existeix. Linea: "+(cur_token.left+1));
                                                                                    RESULT=new SymbolFuncDecl();
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcCap ::= ContCap rparen 
            {
              SymbolFuncCap RESULT =null;
		int contcapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contcapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolContCap contcap = (SymbolContCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolFuncCap(contcap,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcCap ::= lparen rparen 
            {
              SymbolFuncCap RESULT =null;
		RESULT=new SymbolFuncCap(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procDecl ::= r_procedure M id funcCap brop statementList brcl 
            {
              SymbolProcDecl RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int funcCapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcCapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolFuncCap funcCap = (SymbolFuncCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Simbol s=ts.consultaFunc(iden.toString());
if(s==null){
    RESULT =new SymbolProcDecl(iden.toString(), stats,funcCap);

    ts.afegeixSimbol(iden.toString(), TipusSub.NULL, Tipus.FUNC, 0,0,true);
}else{
    comprovaTipus.addError("ERROR Semántic, el procediment "+iden.toString()+", ja existeix. Linea: "+(cur_token.left+1));
    RESULT=new SymbolProcDecl();
    }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ContCap ::= lparen type pars id 
            {
              SymbolContCap RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArr arr = (SymbolArr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      int dimensio=0;
                                                             if(arr.getString()!=null){
                                                                dimensio=2;
                                                             }

                                                             int error= ts.afegeixSimbol(iden.toString(),t.getTipusSub(),Tipus.PARAM,0,dimensio,true);
                                                             if(error==1){
                                                                RESULT = new SymbolContCap(t.getTipusSub(), arr.getString(), iden.toString());
                                                             }else{
                                                                comprovaTipus.addError("ERROR Semántic, el parametre  "+iden.toString()+", ja existeix. Linea: "+(cur_token.left+1));
                                                                RESULT = new SymbolContCap(t.getTipusSub(), arr.getString(), iden.toString());
                                                             }
                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContCap",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ContCap ::= ContCap com type pars id 
            {
              SymbolContCap RESULT =null;
		int contcapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int contcapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolContCap contcap = (SymbolContCap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolType t = (SymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArr arr = (SymbolArr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		int error =  ts.afegeixSimbol(iden.toString(),t.getTipusSub(),Tipus.PARAM,0,0,true);
                                                            if(error==1){
                                                                RESULT = new SymbolContCap(contcap,t.getTipusSub(),arr.getString() ,iden.toString());
                                                            }else{
                                                               comprovaTipus.addError("ERROR Semántic, el parametre  "+iden.toString()+", ja existeix. Linea: "+(cur_token.left+1));
                                                                RESULT = new SymbolContCap(contcap,t.getTipusSub(),arr.getString() ,iden.toString());
                                                            }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContCap",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pars ::= r_array 
            {
              SymbolArr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolArr(s.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pars",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pars ::= 
            {
              SymbolArr RESULT =null;
		RESULT = new SymbolArr(null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pars",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statementList ::= statement statementList 
            {
              SymbolStatementList RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatement stat = (SymbolStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList stats = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new SymbolStatementList(stat,stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statementList ::= 
            {
              SymbolStatementList RESULT =null;
		RESULT=new SymbolStatementList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= varDecl smcol 
            {
              SymbolStatement RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVarDecl vard = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(vard);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= exprSimple smcol 
            {
              SymbolStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            //si expressió correcta
                                            if(!expr.esBuit()){
                                                if (expr.getOperacio().isAssignacio()){
                                                    //si expr
                                                    SymbolExpressioSimple expr2=expr.getOperacio().getVarInit().getExpr();
                                                    //si és crida a subprograma
                                                    if(expr2.getValor().getSubProgCall()!=null){
                                                        if(expr2.getValor().getSubProgCall().retorna()){
                                                            RESULT=new SymbolStatement(expr);
                                                        }else{
                                                            //cas assignam procediment---> error
                                                            comprovaTipus.addError("ERROR Semántic, No pots assignar un procediment Linea: "+(cur_token.left+1));
                                                            RESULT=new SymbolStatement();
                                                        }

                                                    }else{
                                                        RESULT=new SymbolStatement(expr);
                                                    }
                                                }else{
                                                    //si no és crida a un subprograma
                                                    if(expr.getValor().getSubProgCall()==null){
                                                        comprovaTipus.addError("ERROR Semántic, senténcia incorrecte Linea: "+(cur_token.left+1));
                                                        RESULT=new SymbolStatement();
                                                    }else{
                                                        //si és procediment és correcte
                                                        if(!expr.getValor().getSubProgCall().retorna()){
                                                            RESULT=new SymbolStatement(expr);
                                                        }else{
                                                            comprovaTipus.addError("ERROR Semántic, assigna el resultat de la funció! Linea: "+(cur_token.left+1));
                                                            RESULT=new SymbolStatement();
                                                        }

                                                    }

                                                }
                                            }else{
                                                RESULT=new SymbolStatement();
                                            }
                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= forIteration 
            {
              SymbolStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolForIteration f = (SymbolForIteration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= whileStatement 
            {
              SymbolStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolWhileStatement w = (SymbolWhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(w);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= printStatement smcol 
            {
              SymbolStatement RESULT =null;
		int printleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int printright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolPrintStatement print = (SymbolPrintStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new SymbolStatement(print);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= ifStatement 
            {
              SymbolStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIfStatement i = (SymbolIfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= SwitchCase 
            {
              SymbolStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwitchCase s = (SymbolSwitchCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolStatement(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inputStatement ::= r_input lparen rparen 
            {
              SymbolInputStatement RESULT =null;
		RESULT = new SymbolInputStatement();
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputStatement",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // printStatement ::= r_print lparen literal rparen 
            {
              SymbolPrintStatement RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolLiteral str = (SymbolLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                        if(str.isVariable()){
                                                        Simbol s=ts.consultaSimbol(str.toString());
                                                            if(s!=null){
                                                                    if(!s.esInit()){
                                                                        comprovaTipus.addError("ERROR Semàntic, la variable  "+str.toString()+" al print no te cap valor. Linea: "+(cur_token.left+1));
                                                                        RESULT=new SymbolPrintStatement();
                                                                    }else{
                                                                        if(comprovaTipus.gestPrint(str)){
                                                                            RESULT = new SymbolPrintStatement(str);
                                                                        }else{
                                                                            comprovaTipus.addError("ERROR Semàntic, la variable  "+str.toString()+" al print no es del tipus string. Linea: "+(cur_token.left+1));
                                                                            RESULT = new SymbolPrintStatement();
                                                                        }
                                                                    }
                                                           }else{
                                                                comprovaTipus.addError("ERROR Semàntic, la variable  "+str.toString()+" al print no existeix. Linea: "+(cur_token.left+1));
                                                                RESULT = new SymbolPrintStatement();
                                                            }
                                                        }else{
                                                            RESULT = new SymbolPrintStatement(str);
                                                        }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStatement",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literal ::= str 
            {
              SymbolLiteral RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolLiteral(str.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literal ::= id 
            {
              SymbolLiteral RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolLiteral(id.toString(),true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprSimple ::= valor operacio 
            {
              SymbolExpressioSimple RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValor val = (SymbolValor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacio oper = (SymbolOperacio)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//Si el valor es correcte
                                                            if(!val.esBuit()){
                                                                if(oper.isAssignacio()){
                                                                    Simbol s=ts.consultaSimbol(val.toString());
                                                                    s.inicialitza();
                                                                    RESULT=null;
                                                                    if(comprovaTipus.gestIdArray(val.getIden(),val.isArrayElement())){
                                                                            if(comprovaTipus.gestAsig(val,oper)){
                                                                               RESULT=new SymbolExpressioSimple(val, oper);
                                                                            }else{
                                                                               comprovaTipus.addError("ERROR Semántic, assignació incorrecte. Línea: "+cur_token.left);
                                                                              RESULT=new SymbolExpressioSimple();
                                                                            }
                                                                        }else{
                                                                            RESULT=new SymbolExpressioSimple();
                                                                        }
                                                                }else{
                                                                    RESULT=new SymbolExpressioSimple(val,oper);
                                                                }
                                                            }else{
                                                                RESULT=RESULT=new SymbolExpressioSimple();
                                                            }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= id 
            {
              SymbolValor RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            Simbol s=ts.consultaSimbol(iden.toString());
                                            if(s!=null){
                                                    RESULT=new SymbolValor(iden.toString(),s.getTipusSub());
                                            }else{
                                                comprovaTipus.addError("ERROR Semántic de la taula de simbols, La variable "+iden.toString()+" no existeix. Línea: "+cur_token.left);
                                                RESULT=new SymbolValor(iden.toString(),TipusSub.NULL);
                                            }
                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= array 
            {
              SymbolValor RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArray arr = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                      Simbol s=ts.consultaSimbol(arr.getID());
                                                      if(s!=null){
                                                        RESULT=new SymbolValor(arr,s.getTipusSub());
                                                      }else{
                                                        RESULT=new SymbolValor();
                                                      }
                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= integer 
            {
              SymbolValor RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolValor(integer);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= bool 
            {
              SymbolValor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new SymbolValor(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= r_not lparen exprSimple rparen 
            {
              SymbolValor RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN,cur_token.left)){
                                                         RESULT = new SymbolValor(expr,true);
                                                }else{
                                                    comprovaTipus.addError("ERROR Semántic, expressió de tipus incorrecte al fer la negació. Línea: "+cur_token.left);
                                                    RESULT=new SymbolValor(expr);
                                                  }
                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= subProgramCall 
            {
              SymbolValor RESULT =null;
		int subprogramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subprogramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSubProgramCall subprogram = (SymbolSubProgramCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Simbol s=ts.consultaFunc(subprogram.getID());
                                                        p.clear();
                                                        if(s!=null){
                                                            RESULT=new SymbolValor(subprogram,s.getTipusSub());
                                                        }else{
                                                            //comprovaTipus.addError("ERROR Semántic, No existeix la funció que es crida. Línea: "+cur_token.left);
                                                            RESULT=new SymbolValor();
                                                        }
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= lparen exprSimple rparen 
            {
              SymbolValor RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                    if(comprovaTipus.isExprCorrecta(expr,cur_token.left)){
                                                        RESULT = new SymbolValor(expr);
                                                    }else{
                                                        comprovaTipus.addError("ERROR Semántic, expressió de tipus incorrecte. Linea: "+cur_token.left);
                                                        RESULT=new SymbolValor(expr);
                                                    }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= inputStatement 
            {
              SymbolValor RESULT =null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInputStatement input = (SymbolInputStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new SymbolValor(input);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= str 
            {
              SymbolValor RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolValor(str.toString(),true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array ::= id lop exprSimple lclose 
            {
              SymbolArray RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
if(comprovaTipus.gestArray(iden.toString(),cur_token.left)){
RESULT=new SymbolArray(iden.toString(),expr);}
else{
RESULT=new SymbolArray(iden.toString(),expr);
}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacio ::= op exprSimple 
            {
              SymbolOperacio RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOp op = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOperacio(op,expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacio ::= varInit 
            {
              SymbolOperacio RESULT =null;
		int varinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarInit varinit = (SymbolVarInit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOperacio(varinit);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op ::= boolOp 
            {
              SymbolOp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolOp bool = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(bool);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op ::= aritOp 
            {
              SymbolOp RESULT =null;
		int aritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAritOp arit = (SymbolAritOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(arit);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op ::= realOp 
            {
              SymbolOp RESULT =null;
		int realOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolRealOp realOp = (SymbolRealOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolOp(realOp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolOp ::= r_and 
            {
              SymbolBoolOp RESULT =null;
		RESULT = new SymbolBoolOp(Operacions.AND);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // boolOp ::= r_or 
            {
              SymbolBoolOp RESULT =null;
		RESULT = new SymbolBoolOp(Operacions.OR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // aritOp ::= add 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.ADD);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // aritOp ::= sub 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.SUB);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aritOp ::= mul 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.MUL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aritOp ::= div 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.DIV);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aritOp ::= mod 
            {
              SymbolAritOp RESULT =null;
		RESULT = new SymbolAritOp(Operacions.MOD);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // realOp ::= neq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.NEQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // realOp ::= eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.EQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // realOp ::= bg 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.BG);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // realOp ::= sm 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.SM);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // realOp ::= bg_eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.BGEQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // realOp ::= sm_eq 
            {
              SymbolRealOp RESULT =null;
		RESULT = new SymbolRealOp(Operacions.SMEQ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // subProgramCall ::= id lparen rparen 
            {
              SymbolSubProgramCall RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                      Simbol s= ts.consultaFunc(iden.toString());
                                                      ArrayList<Simbol> llista=ts.nParametresFunc(s);
                                                      String msg="";
                                                      for(int i=llista.size()-1;i>=0;i--){
                                                        msg+="{";
                                                          if(llista.get(i).getDimensio()>1){
                                                                msg+="array:";
                                                          }
                                                        msg+=llista.get(i).getTipusSub()+"} ";
                                                      }
                                                      //la funció existeix
                                                      if(s!=null){
                                                      //si necessita paràmetres
                                                        if(llista.size()>0){
                                                            comprovaTipus.addError("ERROR Semántic: la funció/procediment "+iden+" esperava aquests paràmetres: "+msg+". Linea: "+cur_token.left);
                                                            RESULT=new SymbolSubProgramCall();
                                                        }else{//si no necessita paràmetres
                                                            RESULT=new SymbolSubProgramCall(iden.toString(),!(s.getTipusSub().equals(TipusSub.NULL)),s.getTipusSub());
                                                        }

                                                      }else{
                                                        //no existeix la funció cridada
                                                        comprovaTipus.addError("ERROR Semántic,la funció/procediment "+iden+" no esta declarat. Linea: "+cur_token.left);
                                                        RESULT=new SymbolSubProgramCall();
                                                      }
                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // subProgramCall ::= id lparen subProgramContCall rparen 
            {
              SymbolSubProgramCall RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int subprogcontcallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int subprogcontcallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSubProgramContCall subprogcontcall = (SymbolSubProgramContCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                      Simbol s= ts.consultaFunc(iden.toString());
                                                      if(s!=null){
                                                        //else
                                                       if(comprovaTipus.paramCall(s,p,cur_token.left)){
                                                            RESULT=new SymbolSubProgramCall(subprogcontcall,iden.toString(),!(s.getTipusSub().equals(TipusSub.NULL)),s.getTipusSub());
                                                        }else{
                                                            RESULT=new SymbolSubProgramCall();
                                                        }

                                                      }else{
                                                        //no existeix la funció cridada
                                                        comprovaTipus.addError("ERROR Semántic, la funció/procediment "+iden+" no esta declarat. Linea: "+cur_token.left);
                                                        RESULT=new SymbolSubProgramCall();
                                                      } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // subProgramContCall ::= valor 
            {
              SymbolSubProgramContCall RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValor valor = (SymbolValor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.add(valor);

RESULT = new SymbolSubProgramContCall(valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // subProgramContCall ::= subProgramContCall com valor 
            {
              SymbolSubProgramContCall RESULT =null;
		int subprogcontcallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int subprogcontcallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolSubProgramContCall subprogcontcall = (SymbolSubProgramContCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValor valor = (SymbolValor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.add(valor);

    RESULT = new SymbolSubProgramContCall(subprogcontcall, valor);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SwitchCase ::= r_switch lparen exprSimple rparen brop LCases Default brcl 
            {
              SymbolSwitchCase RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lcasesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lcasesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolLCases lcases = (SymbolLCases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int defaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int defaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDefault defa = (SymbolDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                                if(comprovaTipus.gestSwitch(expr,lcases)){
                                                                                                    RESULT = new SymbolSwitchCase(expr,lcases,defa);
                                                                                                }else{

                                                                                                 RESULT = new SymbolSwitchCase();
                                                                                                }
                                                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LCases ::= Case LCases 
            {
              SymbolLCases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCase c = (SymbolCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lcasesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcasesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLCases lcases = (SymbolLCases)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolLCases(c,lcases);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LCases ::= 
            {
              SymbolLCases RESULT =null;
		RESULT = new SymbolLCases();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Case ::= r_case exprSimple twodots statementList 
            {
              SymbolCase RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolCase(expr,state);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Default ::= r_default twodots statementList 
            {
              SymbolDefault RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDefault(state);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Default ::= 
            {
              SymbolDefault RESULT =null;
		RESULT = new SymbolDefault();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // forIteration ::= r_for lparen forInit smcol exprSimple smcol forPostExpression rparen brop statementList brcl 
            {
              SymbolForIteration RESULT =null;
		int forinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int forinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolForInit forinit = (SymbolForInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int forpostleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int forpostright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolForPostExpression forpost = (SymbolForPostExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                        if(comprovaTipus.gestForLoop(forinit,expr,forpost)){
                                                               RESULT = new SymbolForIteration(forinit,expr,forpost,state);
                                                         }else{
                                                              RESULT = new SymbolForIteration();

                                                         }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forIteration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // forInit ::= varDecl 
            {
              SymbolForInit RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVarDecl vardecl = (SymbolVarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolForInit(vardecl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // forInit ::= 
            {
              SymbolForInit RESULT =null;
		RESULT = new SymbolForInit();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // forPostExpression ::= exprSimple 
            {
              SymbolForPostExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolForPostExpression(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // forPostExpression ::= 
            {
              SymbolForPostExpression RESULT =null;
		RESULT = new SymbolForPostExpression();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // whileStatement ::= r_while lparen exprSimple rparen brop statementList brcl 
            {
              SymbolWhileStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList state = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN,cur_token.left)){
                                                        RESULT = new SymbolWhileStatement(expr,state);
                                                     }else{
                                                          RESULT = new SymbolWhileStatement();
                                                          comprovaTipus.addError("ERROR Semántic, expressió de tipus incorrecte a la senténcia WHILE. Linea: "+cur_token.left);
                                                    }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ifStatement ::= r_if lparen exprSimple rparen brop statementList brcl 
            {
              SymbolIfStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN,cur_token.left)){
                                             RESULT = new SymbolIfStatement(expr,states);
                                           }else{
                                              RESULT = new SymbolIfStatement();
                                             comprovaTipus.addError("ERROR Semántic, expressió de tipus incorrecte a la senténcia IF. Linea: "+cur_token.left);
                                           }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ifStatement ::= r_if lparen exprSimple rparen brop statementList brcl r_else brop statementList brcl 
            {
              SymbolIfStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolExpressioSimple expr = (SymbolExpressioSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int statelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int statelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolStatementList statel = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStatementList states = (SymbolStatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		if(comprovaTipus.gestExpr(expr,TipusSub.BOOLEAN,cur_token.left)){
                                                                      RESULT = new SymbolIfStatement(expr,statel,states);
                                                                  }else{
                                                                       RESULT = new SymbolIfStatement();
                                                                      comprovaTipus.addError("ERROR Semántic, expressió de tipus incorrecte a la senténcia IF. Linea: "+cur_token.left);
                                                                 }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // M ::= 
            {
              Object RESULT =null;
		ts.afegeixNivell();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
