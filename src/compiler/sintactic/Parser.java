
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import compiler.Symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

//  /** Constructor which sets the default scanner. */
//  @Deprecated
//  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\035\006\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\007\011\000\002\010\004" +
    "\000\002\010\004\000\002\011\006\000\002\011\007\000" +
    "\002\012\010\000\002\013\004\000\002\013\004\000\002" +
    "\014\006\000\002\014\007\000\002\015\003\000\002\015" +
    "\002\000\002\017\004\000\002\017\002\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\004\000\002\020\003\000\002\030\006\000\002\030" +
    "\004\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\004\000\002\034\006\000" +
    "\002\041\004\000\002\041\002\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\043\003\000\002\043" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\032\005\000\002\032" +
    "\004\000\002\033\005\000\002\033\005\000\002\046\012" +
    "\000\002\047\004\000\002\047\002\000\002\050\006\000" +
    "\002\051\005\000\002\051\002\000\002\022\015\000\002" +
    "\023\003\000\002\023\002\000\002\024\003\000\002\024" +
    "\002\000\002\021\011\000\002\025\010\000\002\027\006" +
    "\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\020\042\ufffe\043\ufffe\047\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\001\002\000\020\042\015\043\013" +
    "\047\012\053\021\054\022\055\010\056\016\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\006" +
    "\023\261\025\170\001\002\000\004\026\256\001\002\000" +
    "\020\042\ufffb\043\ufffb\047\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\001\002\000\010\053\021\054\022\056\016\001" +
    "\002\000\004\004\233\001\002\000\020\042\ufffc\043\ufffc" +
    "\047\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000" +
    "\010\053\021\054\022\056\016\001\002\000\006\004\ufff1" +
    "\030\ufff1\001\002\000\004\004\023\001\002\000\020\042" +
    "\uffff\043\uffff\047\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\001\002\000\006\004\ufff3\030\ufff3\001\002\000\006\004" +
    "\ufff2\030\ufff2\001\002\000\004\022\024\001\002\000\022" +
    "\004\026\005\027\006\033\032\041\052\035\053\021\054" +
    "\022\056\016\001\002\000\006\023\ufff9\025\ufff9\001\002" +
    "\000\044\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7" +
    "\025\uffd7\030\044\032\103\050\uffd7\051\uffd7\001\002\000" +
    "\112\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\056\uffd4\001\002\000\006\023" +
    "\ufff7\025\ufff7\001\002\000\112\004\uffd0\005\uffd0\006\uffd0" +
    "\007\052\010\065\011\054\012\063\013\070\014\051\015" +
    "\062\016\055\017\064\020\061\021\067\023\uffd0\024\uffd0" +
    "\025\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\057\051\066\052\uffd0\053\uffd0\054\uffd0\056" +
    "\uffd0\001\002\000\006\023\ufff5\025\ufff5\001\002\000\112" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\056\uffd5\001\002\000\006\025\077" +
    "\033\100\001\002\000\004\005\076\001\002\000\112\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\056\uffd6\001\002\000\004\030\073\001" +
    "\002\000\006\023\ufff6\025\ufff6\001\002\000\014\004\043" +
    "\005\027\006\033\032\041\052\035\001\002\000\004\033" +
    "\047\001\002\000\114\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\027\uffd7\030\044\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\056" +
    "\uffd7\001\002\000\014\004\043\005\027\006\033\032\041" +
    "\052\035\001\002\000\004\031\046\001\002\000\112\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\056\uffd2\001\002\000\112\004\uffd0\005" +
    "\uffd0\006\uffd0\007\052\010\065\011\054\012\063\013\070" +
    "\014\051\015\062\016\055\017\064\020\061\021\067\023" +
    "\uffd0\024\uffd0\025\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\057\051\066\052\uffd0\053\uffd0" +
    "\054\uffd0\056\uffd0\001\002\000\014\004\uffcd\005\uffcd\006" +
    "\uffcd\032\uffcd\052\uffcd\001\002\000\014\004\uffc5\005\uffc5" +
    "\006\uffc5\032\uffc5\052\uffc5\001\002\000\014\004\uffc3\005" +
    "\uffc3\006\uffc3\032\uffc3\052\uffc3\001\002\000\014\004\uffcf" +
    "\005\uffcf\006\uffcf\032\uffcf\052\uffcf\001\002\000\014\004" +
    "\uffc1\005\uffc1\006\uffc1\032\uffc1\052\uffc1\001\002\000\014" +
    "\004\uffc9\005\uffc9\006\uffc9\032\uffc9\052\uffc9\001\002\000" +
    "\014\004\043\005\027\006\033\032\041\052\035\001\002" +
    "\000\014\004\uffcc\005\uffcc\006\uffcc\032\uffcc\052\uffcc\001" +
    "\002\000\014\004\uffce\005\uffce\006\uffce\032\uffce\052\uffce" +
    "\001\002\000\014\004\uffc7\005\uffc7\006\uffc7\032\uffc7\052" +
    "\uffc7\001\002\000\014\004\uffca\005\uffca\006\uffca\032\uffca" +
    "\052\uffca\001\002\000\014\004\uffc0\005\uffc0\006\uffc0\032" +
    "\uffc0\052\uffc0\001\002\000\014\004\uffc8\005\uffc8\006\uffc8" +
    "\032\uffc8\052\uffc8\001\002\000\014\004\uffc2\005\uffc2\006" +
    "\uffc2\032\uffc2\052\uffc2\001\002\000\014\004\uffcb\005\uffcb" +
    "\006\uffcb\032\uffcb\052\uffcb\001\002\000\014\004\uffc6\005" +
    "\uffc6\006\uffc6\032\uffc6\052\uffc6\001\002\000\014\004\uffc4" +
    "\005\uffc4\006\uffc4\032\uffc4\052\uffc4\001\002\000\060\004" +
    "\uffd9\005\uffd9\006\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\056\uffd9\001\002\000\060\004\uffd1\005" +
    "\uffd1\006\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\056\uffd1\001\002\000\004\006\074\001\002\000" +
    "\004\031\075\001\002\000\006\023\ufff4\025\ufff4\001\002" +
    "\000\112\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\001\002\000\014" +
    "\004\043\005\027\006\033\032\041\052\035\001\002\000" +
    "\006\023\uffbe\025\uffbe\001\002\000\006\025\uffbc\033\uffbc" +
    "\001\002\000\060\004\uffd8\005\uffd8\006\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\052\uffd8\053\uffd8\054\uffd8\056\uffd8\001\002" +
    "\000\016\004\043\005\027\006\033\032\041\033\105\052" +
    "\035\001\002\000\006\025\uffbd\033\uffbd\001\002\000\006" +
    "\023\uffbf\025\uffbf\001\002\000\004\004\107\001\002\000" +
    "\004\032\111\001\002\000\004\026\125\001\002\000\014" +
    "\033\122\047\116\053\uffe5\054\uffe5\056\uffe5\001\002\000" +
    "\006\025\113\033\114\001\002\000\012\047\116\053\uffe5" +
    "\054\uffe5\056\uffe5\001\002\000\004\026\uffef\001\002\000" +
    "\010\053\021\054\022\056\016\001\002\000\010\053\uffe6" +
    "\054\uffe6\056\uffe6\001\002\000\004\004\120\001\002\000" +
    "\006\025\uffec\033\uffec\001\002\000\010\053\021\054\022" +
    "\056\016\001\002\000\004\026\uffee\001\002\000\004\004" +
    "\124\001\002\000\006\025\uffed\033\uffed\001\002\000\042" +
    "\004\026\005\027\006\033\027\uffe3\032\041\034\127\036" +
    "\137\041\143\044\135\045\132\046\131\047\012\052\035" +
    "\053\021\054\022\056\016\001\002\000\046\004\026\005" +
    "\027\006\033\027\uffe3\032\041\034\127\036\137\037\uffe3" +
    "\040\uffe3\041\143\044\135\045\132\046\131\047\012\052" +
    "\035\053\021\054\022\056\016\001\002\000\004\032\217" +
    "\001\002\000\004\023\216\001\002\000\004\032\202\001" +
    "\002\000\004\032\174\001\002\000\006\023\171\025\170" +
    "\001\002\000\046\004\uffdc\005\uffdc\006\uffdc\027\uffdc\032" +
    "\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\052\uffdc\053\uffdc\054\uffdc\056" +
    "\uffdc\001\002\000\014\004\043\005\027\006\033\032\041" +
    "\052\035\001\002\000\004\027\166\001\002\000\004\032" +
    "\146\001\002\000\046\004\uffdf\005\uffdf\006\uffdf\027\uffdf" +
    "\032\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\056\uffdf\001\002\000\046\004\uffdd\005\uffdd\006\uffdd\027" +
    "\uffdd\032\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\056\uffdd\001\002\000\004\023\145\001\002\000\046" +
    "\004\uffda\005\uffda\006\uffda\027\uffda\032\uffda\034\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\052\uffda\053\uffda\054\uffda\056\uffda\001\002\000" +
    "\046\004\uffde\005\uffde\006\uffde\027\uffde\032\uffde\034\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\052\uffde\053\uffde\054\uffde\056\uffde\001\002" +
    "\000\046\004\uffe1\005\uffe1\006\uffe1\027\uffe1\032\uffe1\034" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\052\uffe1\053\uffe1\054\uffe1\056\uffe1\001" +
    "\002\000\014\004\043\005\027\006\033\032\041\052\035" +
    "\001\002\000\004\033\150\001\002\000\004\026\151\001" +
    "\002\000\010\027\uffb9\037\152\040\uffb9\001\002\000\014" +
    "\004\043\005\027\006\033\032\041\052\035\001\002\000" +
    "\010\027\uffb9\037\152\040\uffb9\001\002\000\006\027\uffb6" +
    "\040\156\001\002\000\004\027\161\001\002\000\004\024" +
    "\157\001\002\000\042\004\026\005\027\006\033\027\uffe3" +
    "\032\041\034\127\036\137\041\143\044\135\045\132\046" +
    "\131\047\012\052\035\053\021\054\022\056\016\001\002" +
    "\000\004\027\uffb7\001\002\000\046\004\uffbb\005\uffbb\006" +
    "\uffbb\027\uffbb\032\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\056\uffbb\001\002\000\006\027\uffba\040\uffba" +
    "\001\002\000\004\024\164\001\002\000\046\004\026\005" +
    "\027\006\033\027\uffe3\032\041\034\127\036\137\037\uffe3" +
    "\040\uffe3\041\143\044\135\045\132\046\131\047\012\052" +
    "\035\053\021\054\022\056\016\001\002\000\010\027\uffb8" +
    "\037\uffb8\040\uffb8\001\002\000\020\042\ufff0\043\ufff0\047" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002\000\046" +
    "\004\uffdb\005\uffdb\006\uffdb\027\uffdb\032\uffdb\034\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\052\uffdb\053\uffdb\054\uffdb\056\uffdb\001\002\000" +
    "\004\004\172\001\002\000\046\004\uffe2\005\uffe2\006\uffe2" +
    "\027\uffe2\032\uffe2\034\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\056\uffe2\001\002\000\004\022\024\001\002\000" +
    "\006\023\ufff8\025\ufff8\001\002\000\014\004\043\005\027" +
    "\006\033\032\041\052\035\001\002\000\004\033\176\001" +
    "\002\000\004\026\177\001\002\000\042\004\026\005\027" +
    "\006\033\027\uffe3\032\041\034\127\036\137\041\143\044" +
    "\135\045\132\046\131\047\012\052\035\053\021\054\022" +
    "\056\016\001\002\000\004\027\201\001\002\000\046\004" +
    "\uffb0\005\uffb0\006\uffb0\027\uffb0\032\uffb0\034\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\056\uffb0\001\002\000\014" +
    "\023\uffb3\047\012\053\021\054\022\056\016\001\002\000" +
    "\004\023\205\001\002\000\006\023\uffb4\025\170\001\002" +
    "\000\014\004\043\005\027\006\033\032\041\052\035\001" +
    "\002\000\004\023\207\001\002\000\016\004\043\005\027" +
    "\006\033\032\041\033\uffb1\052\035\001\002\000\004\033" +
    "\212\001\002\000\004\033\uffb2\001\002\000\004\026\213" +
    "\001\002\000\042\004\026\005\027\006\033\027\uffe3\032" +
    "\041\034\127\036\137\041\143\044\135\045\132\046\131" +
    "\047\012\052\035\053\021\054\022\056\016\001\002\000" +
    "\004\027\215\001\002\000\046\004\uffb5\005\uffb5\006\uffb5" +
    "\027\uffb5\032\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\056\uffb5\001\002\000\046\004\uffe0\005\uffe0\006" +
    "\uffe0\027\uffe0\032\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\056\uffe0\001\002\000\014\004\043\005\027" +
    "\006\033\032\041\052\035\001\002\000\004\033\221\001" +
    "\002\000\004\026\224\001\002\000\004\027\231\001\002" +
    "\000\004\035\226\001\002\000\042\004\026\005\027\006" +
    "\033\027\uffe3\032\041\034\127\036\137\041\143\044\135" +
    "\045\132\046\131\047\012\052\035\053\021\054\022\056" +
    "\016\001\002\000\004\027\uffad\001\002\000\004\026\227" +
    "\001\002\000\042\004\026\005\027\006\033\027\uffe3\032" +
    "\041\034\127\036\137\041\143\044\135\045\132\046\131" +
    "\047\012\052\035\053\021\054\022\056\016\001\002\000" +
    "\004\027\uffae\001\002\000\046\004\uffaf\005\uffaf\006\uffaf" +
    "\027\uffaf\032\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\056\uffaf\001\002\000\010\027\uffe4\037\uffe4\040" +
    "\uffe4\001\002\000\004\032\236\001\002\000\004\026\250" +
    "\001\002\000\006\025\243\033\244\001\002\000\014\033" +
    "\240\047\116\053\uffe5\054\uffe5\056\uffe5\001\002\000\010" +
    "\053\021\054\022\056\016\001\002\000\004\026\uffe9\001" +
    "\002\000\004\004\242\001\002\000\006\025\uffe8\033\uffe8" +
    "\001\002\000\012\047\116\053\uffe5\054\uffe5\056\uffe5\001" +
    "\002\000\004\026\uffea\001\002\000\010\053\021\054\022" +
    "\056\016\001\002\000\004\004\247\001\002\000\006\025" +
    "\uffe7\033\uffe7\001\002\000\042\004\026\005\027\006\033" +
    "\027\uffe3\032\041\034\127\036\137\041\143\044\135\045" +
    "\132\046\131\047\012\052\035\053\021\054\022\056\016" +
    "\001\002\000\004\027\252\001\002\000\020\042\uffeb\043" +
    "\uffeb\047\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002" +
    "\000\004\004\254\001\002\000\004\022\024\001\002\000" +
    "\006\023\ufffa\025\ufffa\001\002\000\042\004\026\005\027" +
    "\006\033\027\uffe3\032\041\034\127\036\137\041\143\044" +
    "\135\045\132\046\131\047\012\052\035\053\021\054\022" +
    "\056\016\001\002\000\004\027\260\001\002\000\004\002" +
    "\000\001\002\000\020\042\ufffd\043\ufffd\047\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\002\004\003\003\001\001\000\014\004" +
    "\017\005\006\007\013\012\010\016\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\024\001\001\000" +
    "\020\016\036\030\027\032\031\033\033\034\035\035\037" +
    "\042\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\040\055\041\101" +
    "\043\052\044\057\045\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\041\034\035\042\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\044\034\035\042\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\040\055\041\070" +
    "\043\052\044\057\045\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\071\034\035\042" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\100\034\035\042\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\103\034\035\042\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\107\011\111" +
    "\001\001\000\002\001\001\000\004\015\120\001\001\000" +
    "\002\001\001\000\004\015\114\001\001\000\002\001\001" +
    "\000\004\016\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\132\016\016\017\135\020\125\021\143\022\137\025\140" +
    "\030\141\032\127\033\033\034\035\042\030\046\133\001" +
    "\001\000\034\005\132\016\016\017\231\020\125\021\143" +
    "\022\137\025\140\030\141\032\127\033\033\034\035\042" +
    "\030\046\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\166\034\035\042\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\146\034\035\042" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\153\050\152\001\001\000\010\030\162\034\035\042" +
    "\030\001\001\000\006\047\161\050\152\001\001\000\004" +
    "\051\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\132\016\016\017\157\020\125\021\143\022\137" +
    "\025\140\030\141\032\127\033\033\034\035\042\030\046" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\132\016\016\017" +
    "\164\020\125\021\143\022\137\025\140\030\141\032\127" +
    "\033\033\034\035\042\030\046\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\172\001\001\000\002\001" +
    "\001\000\010\030\174\034\035\042\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\132\016\016\017" +
    "\177\020\125\021\143\022\137\025\140\030\141\032\127" +
    "\033\033\034\035\042\030\046\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\203\016\016\023\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\205\034\035\042\030\001\001\000\002\001\001\000\012" +
    "\024\207\030\210\034\035\042\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\132" +
    "\016\016\017\213\020\125\021\143\022\137\025\140\030" +
    "\141\032\127\033\033\034\035\042\030\046\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\217\034\035\042\030\001\001\000\002\001\001" +
    "\000\006\026\222\027\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\132\016\016\017\224\020\125" +
    "\021\143\022\137\025\140\030\141\032\127\033\033\034" +
    "\035\042\030\046\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\132\016\016\017\227\020\125\021" +
    "\143\022\137\025\140\030\141\032\127\033\033\034\035" +
    "\042\030\046\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\233\014\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\236\001" +
    "\001\000\004\016\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\244\001\001\000" +
    "\002\001\001\000\004\016\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\132\016\016\017\250\020" +
    "\125\021\143\022\137\025\140\030\141\032\127\033\033" +
    "\034\035\042\030\046\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\254\001\001" +
    "\000\002\001\001\000\034\005\132\016\016\017\256\020" +
    "\125\021\143\022\137\025\140\030\141\032\127\033\033" +
    "\034\035\042\030\046\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Scanner scanner;

    public Parser(Scanner scanner){
        this.scanner = scanner;
    }

    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
     * Variable utilitzada per emmagatzemar el darrer valor calculat.
     * Val 0 inicialment
     **/
    private double ans = 0;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolProgram start_val = (SymbolProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList r_main brop statementList brcl 
            {
              SymbolProgram RESULT =null;
		System.out.println("SOC UN SYMBOL PROGRAM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              SymbolDeclList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              SymbolDeclList RESULT = new SymbolDeclList();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl smcol 
            {
              SymbolDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= funcDecl 
            {
              SymbolDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= procDecl 
            {
              SymbolDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDecl ::= r_const type id varInit 
            {
              SymbolVarDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type id varInit 
            {
              SymbolVarDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDecl ::= varDecl com id varInit 
            {
              SymbolVarDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varInit ::= asig exprSimple 
            {
              SymbolVarInit RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varInit ::= asig arrayInit 
            {
              SymbolVarInit RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varInit ::= asig subProgramCall 
            {
              SymbolVarInit RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInit",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arrayInit ::= type lop integer lclose 
            {
              SymbolArrayInit RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInit",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= r_int 
            {
              SymbolType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= r_bool 
            {
              SymbolType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= r_string 
            {
              SymbolType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDecl ::= r_function type id funcCap brop statementList brcl 
            {
              SymbolFuncDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcCap ::= funcContCap rparen 
            {
              SymbolFuncCap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcCap ::= lparen rparen 
            {
              SymbolFuncCap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCap",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcContCap ::= lparen argType type id 
            {
              SymbolFuncContCap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcContCap",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcContCap ::= funcContCap com argType type id 
            {
              SymbolFuncContCap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcContCap",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procDecl ::= r_procedure id procCap brop statementList brcl 
            {
              SymbolProcDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procCap ::= procContCap rparen 
            {
              SymbolProcCap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCap",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procCap ::= lparen rparen 
            {
              SymbolProcCap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procCap",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procContCap ::= lparen argType type id 
            {
              SymbolProcContCap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procContCap",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procContCap ::= procContCap com argType type id 
            {
              SymbolProcContCap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procContCap",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argType ::= r_const 
            {
              SymbolArgType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argType",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argType ::= 
            {
              SymbolArgType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argType",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statementList ::= statement statementList 
            {
              SymbolStatementList RESULT =null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statementList ::= 
            {
              SymbolStatementList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= varDecl smcol 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= exprSimple smcol 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= subProgramCall smcol 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= forIteration 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= whileIteration 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= ifStatement 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= SwitchCase 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= r_return exprSimple 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= r_break 
            {
              SymbolStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprSimple ::= lparen exprSimple rparen operacio 
            {
              SymbolExpressio RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprSimple ::= valor operacio 
            {
              SymbolExpressio RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprSimple",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= id 
            {
              SymbolValor RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= array 
            {
              SymbolValor RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= integer 
            {
              SymbolValor RESULT =null;
		System.out.println("VALOR ENTER ASSIGNAT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= bool 
            {
              SymbolValor RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= r_not bool 
            {
              SymbolValor RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // array ::= id lop exprSimple lclose 
            {
              SymbolArray RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacio ::= op exprSimple 
            {
              SymbolOper RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacio ::= 
            {
              SymbolOper RESULT = new SymbolOper();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacio",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op ::= boolOp 
            {
              SymbolOperador RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op ::= aritOp 
            {
              SymbolOperador RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op ::= realOp 
            {
              SymbolOperador RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolOp ::= r_and 
            {
              SymbolBoolOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolOp ::= r_or 
            {
              SymbolBoolOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolOp",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // aritOp ::= add 
            {
              SymbolAritOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // aritOp ::= sub 
            {
              SymbolAritOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // aritOp ::= mul 
            {
              SymbolAritOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aritOp ::= div 
            {
              SymbolAritOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aritOp ::= mod 
            {
              SymbolAritOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritOp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // realOp ::= neg 
            {
              SymbolRealOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // realOp ::= eq 
            {
              SymbolRealOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // realOp ::= bg 
            {
              SymbolRealOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // realOp ::= sm 
            {
              SymbolRealOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // realOp ::= bg_eq 
            {
              SymbolRealOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // realOp ::= sm_eq 
            {
              SymbolRealOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("realOp",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // subProgramCall ::= id lparen rparen 
            {
              SymbolSubProgramCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // subProgramCall ::= subProgramContCall rparen 
            {
              SymbolSubProgramCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramCall",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // subProgramContCall ::= id lparen exprSimple 
            {
              SymbolSubProgramContCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // subProgramContCall ::= subProgramContCall com exprSimple 
            {
              SymbolSubProgramContCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subProgramContCall",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SwitchCase ::= r_switch lparen exprSimple rparen brop LCases Default brcl 
            {
              SymbolSwitchCase RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchCase",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LCases ::= Case LCases 
            {
              SymbolLCases RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LCases ::= 
            {
              SymbolLCases RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCases",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Case ::= r_case exprSimple twodots statementList 
            {
              SymbolCase RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Default ::= r_default twodots statementList 
            {
              SymbolDefault RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Default ::= 
            {
              SymbolDefault RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Default",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // forIteration ::= r_for lparen forInit smcol exprSimple smcol forPostExpression rparen brop statementList brcl 
            {
              SymbolForStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forIteration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // forInit ::= varDecl 
            {
              SymbolForInit RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // forInit ::= 
            {
              SymbolForInit RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // forPostExpression ::= exprSimple 
            {
              SymbolForPostExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // forPostExpression ::= 
            {
              SymbolForPostExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forPostExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // whileIteration ::= r_while lparen exprSimple rparen brop statementList brcl 
            {
              SymbolWhileStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileIteration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ifStatement ::= r_if lparen exprSimple rparen elseStatement brcl 
            {
              SymbolIfStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elseStatement ::= elseIfStatement r_else brop statementList 
            {
              SymbolElseStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseStatement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // elseStatement ::= brop statementList 
            {
              SymbolElseStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseStatement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
